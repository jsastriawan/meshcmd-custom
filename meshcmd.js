/*
Copyright 2018-2021 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

/** 
* @description MeshCmd, command line tool for Intel AMT and MeshCentral.
* @author Ylian Saint-Hilaire
* @version v0.2.0
*/

// Debug Stuff
//console.displayFinalizerMessages = 1; // Display objects that have event listeners that are disposed.
//console.displayStreamPipeMessages = 1; // Display stream pipe and un-pipes
//var __gc = setInterval(function () { console.log('GC'); _debugGC() }, 2000); //


var fs = require('fs');
var os = require('os');
var net = require('net');
var http = require('http');
var dgram = require('dgram');
var httpHeaders = require('http-headers');
var tcpserver = null;
var broadcastSockets = {};
var multicastSockets = {};
var discoveryInterval = null;
var membershipIPv4 = '239.255.255.235';
var membershipIPv6 = 'FF02:0:0:0:0:0:0:FE';
var settings = null;
var meshCmdVersion = '***Mesh*Cmd*Version***'; // Dynamically replaced with MeshCentral version
var amtLms = null, amtMei = null, amtMeiState = null;
var wsstack = null, amtstack = null;
var oswsstack = null, osamtstack = null;
var amtMeiTmpState = null;
var SMBiosTables = null;
var globalDebugFlags = 0; // 1 = IDER Debug
var pendingAmtConfigActions = 0;
var RCSMessageProtocolVersion = 1; // RCS Message Protocol Version.  Needs to be less than or equal to RCS server Message Protocol Version

// MeshCommander for Firmware (GZIP'ed, Base64) v0.9.0
var Large_IntelAmtWebApp_etag = "qHjwXzQEHWk8mJCt1CwV";
var Large_IntelAmtWebApp = "";
var Medium_IntelAmtWebApp_etag = "51CThbgkPiwQuw450CTF";
var Medium_IntelAmtWebApp = "";
var Small_IntelAmtWebApp_etag = "KsmoOoCcT5qSSljY6Nv3";
var Small_IntelAmtWebApp = "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";

// MeshCommander LMS (GZIP'ed, Base64) v0.9.0
var _IntelAmtWebApp_etag = "A2rEfbOagx5Xc9AV3Gmm";
var _IntelAmtWebApp = "";

// MeshCommander Local (GZIP'ed, Base64) v0.8.3
var FullSite_IntelAmtLocalWebApp_etag = "xVzv3zwu7TbauOUKmy3r";
var FullSite_IntelAmtLocalWebApp = "";

// Check the server certificate fingerprint
function onVerifyServer(clientName, certs) {
    if (certs == null) { certs = clientName; } // Temporary thing until we fix duktape
    try { for (var i in certs) { if (certs[i].fingerprint.replace(/:/g, '') == settings.serverhttpshash) { return; } } } catch (e) { }
    if (settings.serverhttpshash != null) {
        console.log('Error: Failed to verify server certificate.');
        console.log('Server TLS hash: ' + certs[i].fingerprint.replace(/:/g, ''));
        exit(255);
        throw 'Invalid server certificate';
    }
}

// Various utility functions
function debug(level, message) { if ((settings.debuglevel != null) && (settings.debuglevel >= level)) { console.log(message); } }
function exit(status) { if (status == null) { status = 0; } try { process.exit(status); } catch (e) { } }
function getInstance(x, y) { for (var i in x) { if (x[i]["InstanceID"] == y) return x[i]; } return null; }
function md5hex(str) { return require('MD5Stream').create().syncHash(str).toString('hex'); }
function guidToStr(g) { return g.substring(6, 8) + g.substring(4, 6) + g.substring(2, 4) + g.substring(0, 2) + "-" + g.substring(10, 12) + g.substring(8, 10) + "-" + g.substring(14, 16) + g.substring(12, 14) + "-" + g.substring(16, 20) + "-" + g.substring(20); }
function parceArguments(argv) { var r = {}; for (var i in argv) { i = parseInt(i); if (argv[i].startsWith('--') == true) { var key = argv[i].substring(2).toLowerCase(), val = true; if (((i + 1) < argv.length) && (argv[i + 1].startsWith('--') == false)) { val = argv[i + 1]; } r[key] = val; } } return r; }

// Convert an object to string with all functions
function objToString(x, p, ret) {
    if (ret == undefined) ret = '';
    if (p == undefined) p = 0;
    if (x == null) { return '[null]'; }
    if (p > 8) { return '[...]'; }
    if (x == undefined) { return '[undefined]'; }
    if (typeof x == 'string') { if (p == 0) return x; return '"' + (x.split('\0')[0]) + '"'; }
    if (typeof x == 'buffer') { return '[buffer]'; }
    if (typeof x != 'object') { return x; }
    var r = '{' + (ret ? '\r\n' : ' ');
    for (var i in x) {
        if (i != '_ObjectID') { r += (addPad(p + 2, ret) + i + ': ' + objToString(x[i], p + 2, ret) + (ret ? '\r\n' : ' ')); }
    }
    return r + addPad(p, ret) + '}';
}

// Return p number of spaces 
function addPad(p, ret) { var r = ''; for (var i = 0; i < p; i++) { r += ' '; } return r; }

// Parse the incoming arguments
function run(argv) {
    if (meshCmdVersion[0] == '*') { meshCmdVersion = ''; } else { meshCmdVersion = ' v' + meshCmdVersion; }
    var args = parceArguments(argv);
    //console.log(JSON.stringify(argv));
    //console.log('addedModules = ' + JSON.stringify(addedModules));
    var actionpath = 'meshaction.txt';
    if (args.actionfile != null) { actionpath = args.actionfile; }
    var actions = ['HELP', 'ROUTE', 'MICROLMS', 'AMTCONFIG', 'AMTSCAN', 'AMTPOWER', 'AMTFEATURES', 'AMTNETWORK', 'AMTLOADWEBAPP', 'AMTLOADSMALLWEBAPP', 'AMTLOADLARGEWEBAPP', 'AMTCLEARWEBAPP', 'AMTSTORAGESTATE', 'AMTINFO', 'AMTINFODEBUG', 'AMTVERSIONS', 'AMTHASHES', 'AMTSAVESTATE', 'AMTUUID', 'AMTCCM', 'AMTDEACTIVATE', 'AMTACMDEACTIVATE', 'SMBIOS', 'RAWSMBIOS', 'MESHCOMMANDER', 'AMTAUDITLOG', 'AMTEVENTLOG', 'AMTPRESENCE', 'AMTWIFI', 'AMTWAKE', 'AMTSTARTCONFIG', 'AMTSTOPCONFIG'];

    // Load the action file
    var actionfile = null;
    try { actionfile = fs.readFileSync(actionpath); } catch (e) { }
    if ((actionpath != 'meshaction.txt') && (actionfile == null)) { console.log('Unable to load \"' + actionpath + '\". Create this file or specify the location using --actionfile [filename].'); exit(1); return; }
    if (actionfile != null) { try { settings = JSON.parse(actionfile); } catch (e) { console.log(actionpath, e); exit(1); return; } } else { if (argv.length >= 2) { settings = { action: argv[1] } } }
    if (settings == null) { settings = {}; }
    var settings2 = {}; for (var i in settings) { settings2[i.toLowerCase()] = settings[i]; } settings = settings2;

    // Set the arguments
    if ((typeof args.action) == 'string') { settings.action = args.action; }
    if ((typeof args.authcookie) == 'string') { settings.authcookie = args.authcookie; }
    if ((typeof args.localport) == 'string') { settings.localport = parseInt(args.localport); }
    if ((typeof args.remotenodeid) == 'string') { settings.remotenodeid = args.remotenodeid; }
    if ((typeof args.name) == 'string') { settings.name = args.name; }
    if ((typeof args.id) == 'string') { settings.id = args.id; }
    if ((typeof args.username) == 'string') { settings.username = args.username; }
    if ((typeof args.password) == 'string') { settings.password = args.password; }
    if ((typeof args.url) == 'string') { settings.url = args.url; }
    if ((typeof args.type) == 'string') { settings.type = args.type; }
    if ((typeof args.user) == 'string') { settings.username = args.user; }
    if ((typeof args.pass) == 'string') { settings.password = args.pass; }
    if ((typeof args.host) == 'string') { settings.hostname = args.host; }
    if ((typeof args.hostname) == 'string') { settings.hostname = args.hostname; }
    if ((typeof args.serverid) == 'string') { settings.serverid = args.serverid; }
    if ((typeof args.serverhttpshash) == 'string') { settings.serverhttpshash = args.serverhttpshash; }
    if ((typeof args.serverurl) == 'string') { settings.serverurl = args.serverurl; }
    if ((typeof args.remoteport) == 'string') { settings.remoteport = parseInt(args.remoteport); }
    if ((typeof args.remotetarget) == 'string') { settings.remotetarget = args.remotetarget; }
    if ((typeof args.out) == 'string') { settings.output = args.out; }
    if ((typeof args.output) == 'string') { settings.output = args.output; }
    if ((typeof args.debug) == 'string') { settings.debuglevel = parseInt(args.debug); }
    if ((typeof args.debugflags) == 'string') { globalDebugFlags = parseInt(args.debugflags); }
    if ((typeof args.script) == 'string') { settings.script = args.script; }
    if ((typeof args.agent) == 'string') { settings.agent = args.agent; }
    if ((typeof args.proxy) == 'string') { settings.proxy = args.proxy; }
    if ((typeof args.floppy) == 'string') { settings.floppy = args.floppy; }
    if ((typeof args.cdrom) == 'string') { settings.cdrom = args.cdrom; }
    if ((typeof args.tag) == 'string') { settings.tag = args.tag; }
    if ((typeof args.scan) == 'string') { settings.scan = args.scan; }
    if ((typeof args.token) == 'string') { settings.token = args.token; }
    if ((typeof args.timeout) == 'string') { settings.timeout = parseInt(args.timeout); }
    if ((typeof args.uuidoutput) == 'string' || args.uuidoutput) { settings.uuidoutput = args.uuidoutput; }
    if ((typeof args.desc) == 'string') { settings.desc = args.desc; }
    if (args.emailtoken) { settings.emailtoken = true; }
    if (args.smstoken) { settings.smstoken = true; }
    if (args.debug === true) { settings.debuglevel = 1; }
    if (args.debug) { try { waitForDebugger(); } catch (e) { } }
    if (args.noconsole) { settings.noconsole = true; }
    if (args.nocommander) { settings.noconsole = true; }
    if (args.lmsdebug) { settings.lmsdebug = true; }
    if (args.json) { settings.json = true; }
    if (args.tls) { settings.tls = true; }
    if ((argv.length > 1) && (actions.indexOf(argv[1].toUpperCase()) >= 0)) { settings.action = argv[1]; }

    // Validate meshaction.txt
    if (settings.action == null) {
        console.log('MeshCentral Command (MeshCmd) ' + meshCmdVersion);
        console.log('No action specified, use MeshCmd like this:\r\n');
        console.log('  meshcmd [action] [arguments...]\r\n');
        console.log('Valid MeshCentral actions:');
        console.log('  Route             - Map a local TCP port to a remote computer.');
        console.log('  AmtConfig         - Setup Intel AMT on this computer.');
        console.log('\r\nValid local actions:');
        console.log('  SMBios            - Display System Management BIOS tables for this computer.');
        console.log('  RawSMBios         - Display RAW System Management BIOS tables for this computer.');
        console.log('  MicroLMS          - Run MicroLMS, allowing local access to Intel AMT.');
        console.log('  AmtInfo           - Show Intel AMT version and activation state.');
        console.log('  AmtVersions       - Show all Intel ME version information.');
        console.log('  AmtHashes         - Show all Intel AMT trusted activation hashes.');
        console.log('  AmtCCM            - Activate Intel AMT into Client Control Mode.');
        console.log('  AmtDeactivate     - Deactivate Intel AMT if activated in Client Control mode.');
        console.log('  AmtAcmDeactivate  - Deactivate Intel AMT if activated in Admin Control mode.');
        console.log('\r\nValid local or remote actions:');
        console.log('  MeshCommander     - Launch a local MeshCommander web server.');
        console.log('  AmtUUID           - Show Intel AMT unique identifier.');
        console.log('  AmtEventLog       - Show the Intel AMT event log.');
        console.log('  AmtAuditLog       - Show the Intel AMT audit log.');
        console.log('  AmtLoadWebApp     - Load MeshCommander in Intel AMT 11.6+ firmware.');
        console.log('  AmtClearWebApp    - Clear everything from Intel AMT web storage.');
        console.log('  AmtStorageState   - Show contents of the Intel AMT web storage.');
        console.log('  AmtSaveState      - Save all Intel AMT WSMAN object to file.');
        console.log('  AmtPresence       - Heartbeat a local Intel AMT watchdog agent.');
        console.log('  AmtPower          - Perform remote Intel AMT power operation.');
        console.log('  AmtIDER           - Mount local disk image to remote computer.');
        console.log('  AmtFeatures       - Intel AMT features & user consent.');
        console.log('  AmtNetwork        - Intel AMT network interface settings.');
        console.log('  AmtScan           - Search local network for Intel AMT devices.');
        console.log('  AmtWifi           - Intel AMT Wifi interface settings.');
        console.log('  AmtWake           - Intel AMT Wake Alarms.');
        console.log('  AmtCert           - Manage Certificates in Intel AMT certificate storage.');
        console.log('\r\nHelp on a specific action using:\r\n');
        console.log('  meshcmd help [action]');
        exit(1); return;
    }
    if (settings.action == 'help') {
        if (argv.length <= 2) {
            actions.shift();
            console.log('Help usage:\r\n\r\n  MeshCmd help [action]\r\n\r\nValid actions are: ' + actions.join(', ') + '.');
            exit(1); return;
        }
        var action = argv[2].toLowerCase();
        if (action == 'route') {
            console.log("The route action is used along with a MeshCentral account to map a local TCP port to a remote port on any computer on your MeshCentral account. This action requires many arguments, to avoid specifying them all it's best to download the meshaction.txt file from the web site and place it in the current folder. Example usage:\r\n\r\n  (Place meshaction.txt file in current folder)\r\n  meshcmd route --pass myAccountPassword");
        } else if (action == 'smbios') {
            console.log("SMBios action will display this computer's system management BIOS information. Example usage:\r\n\r\n  meshcmd smbios --out smbios.txt\r\n");
            console.log('\r\Optional arguments:\r\n');
            console.log('  --output [filename]    Optional filename to write the results to.');
        } else if (action == 'rawsmbios') {
            console.log("RawSMBios action will display this computer's system management BIOS information in raw hexdecimal form. Example usage:\r\n\r\n  meshcmd rawsmbios --out smbios.txt\r\n");
            console.log('\r\Optional arguments:\r\n');
            console.log('  --output [filename]    Optional filename to write the results to.');
        } else if (action == 'amtinfo') {
            console.log('AmtInfo action will get the version and activation state of Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Example usage:\r\n\r\n  meshcmd amtinfo');
        } else if ((action == 'amtversion') || (action == 'amtversions')) {
            console.log('AmtVersions will display all version information about Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Example usage:\r\n\r\n  meshcmd amtversions');
        } else if (action == 'amthashes') {
            console.log('Amthashes will display all trusted activations hashes for Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. These certificates hashes are used by Intel AMT when performing activation into ACM mode. Example usage:\r\n\r\n  meshcmd amthashes');
        } else if ((action == 'microlms') || (action == 'lms') || (action == 'amtlms')) {
            console.log('Starts MicroLMS on this computer, allowing local access to Intel AMT on TCP ports 16992 and 16993 when applicable. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. These certificates hashes are used by Intel AMT when performing activation into ACM mode. Example usage:\r\n\r\n  meshcmd microlms');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --noconsole            MeshCommander for LMS will no be available on port 16994.');
            console.log('\r\nRun as a background service:\r\n');
            console.log('  microlms install/uninstall/start/stop.');
        } else if (action == 'amtccm') {
            console.log('AmtCCM will attempt to activate Intel AMT on this computer into client control mode (CCM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be in "pre-provisioning" state for this command to work and a administrator password must be provided.');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --password [password]     Admin password used to activate Intel AMT.');
        } else if (action == 'amtconfig') {
            console.log('AmtConfig will attempt to activate and configure Intel AMT on this computer. The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Example usage:\r\n\r\n  meshcmd amtconfig --url [url]');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --url [wss://server]      The address of the MeshCentral server.');
            console.log('  --id [groupid]            The device group identifier.');
            console.log('  --serverhttpshash [hash]  Optional TLS server certificate hash.');
            console.log('  --user [username]         The Intel AMT admin username, admin is default.');
            console.log('  --pass [password]         The Intel AMT admin password.');
            console.log('  --desc [description]      Description of the device, used when first added to server.');
        } else if (action == 'amtdeactivate') {
            console.log('AmtDeactivate will attempt to deactivate Intel AMT on this computer when in client control mode (CCM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be activated in client control mode for this command to work. Example usage:\r\n\r\n  meshcmd amtdeactivate');
        } else if (action == 'amtacmdeactivate') {
            console.log('AmtACMDeactivate will attempt to deactivate Intel AMT on this computer when in admin control mode (ACM). The command must be run on a computer with Intel AMT, must run as administrator and the Intel management driver must be installed. Intel AMT must be activated in admin control mode for this command to work. Example usage:\r\n\r\n  meshcmd amtacmdeactivate');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --type [partial/full]  Specifies to perform partial or full unprovision.');
        } else if (action == 'amtuuid') {
            console.log('AmtUUID action will get the unique identifier of the local or remote Intel AMT computer. By default, the local UUID is obtained unless a host is specified. Intel AMT must be activated for this command to work. Example usage:\r\n\r\n  meshcmd amtuuid --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if ((action == 'amtloadwebapp') || (action == 'amtloadsmallwebapp') || (action == 'amtloadlargewebapp') || (action == 'amtclearwebapp') || (action == 'amtstoragestate')) {
            console.log('AmtLoadWebApp action will load MeshCommander into Intel AMT 11.6 or higher. If the computer is in ACM mode, MeshCommander will replace the default index.htm on HTTP/16992 or HTTPS/16993. If Intel AMT is in CCM mode, MeshCommander will be installed alongside the default web page and will be accessible in the "Web Applications" section. This action works on Intel AMT 11.6 and higher only. Example usage:\r\n\r\n  meshcmd amtloadwebapp --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtclearwebstorage') {
            console.log('AmtClearWebStorage will clear the web storage of Intel AMT, removing any loaded firmware version of MeshCommander. This command can clear the local or a remote Intel AMT computer. By default, the local computer storage is cleared unless a host is specified. Intel AMT must be activated for this command to work. This action works on Intel AMT 11.6 and higher only. Example usage:\r\n\r\n  meshcmd amtclearwebstorage --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtstoragestate') {
            console.log('AmtStorageState will display the content of the web storage of Intel AMT including any loaded firmware version of MeshCommander. This command can read the storage state of a local or remote Intel AMT computer. By default, the local computer storage state is displayed unless a host is specified. Intel AMT must be activated for this command to work. This action works on Intel AMT 11.6 and higher only. Example usage:\r\n\r\n  meshcmd amtstoragestate --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtsavestate') {
            console.log('AmtSaveState action will fetch all the entire state of Intel AMT and save it as a JSON file. This action will take multiple minutes to perform. The command will fetch the local computer state unless host is specified. Intel AMT must be ativated for this command to work. Example usage:\r\n\r\n  meshcmd amtsavestate --host 1.2.3.4 --user admin --pass mypassword --tls --output state.json');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --output [filename]    The output file for the Intel AMT state in JSON format.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
        } else if (action == 'amtpresence') {
            console.log('AmtPresence will heartbeat a local Intel AMT watchdog agent. Example usage:\r\n\r\n  meshcmd amtpresence --agent B4B6A24C-255E-A75C-F5E8-B00B4D946AA7');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --agent [uuid]         The unique identifier of the watchdog agent.');
        } else if (action == 'amtpower') {
            console.log('AmtPower will get current power state or send a reboot command to a remote Intel AMT device. Example usage:\r\n\r\n  meshcmd amtpower --reset --host 1.2.3.4 --user admin --pass mypassword --tls');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --reset, --poweron, --poweroff, --powercycle, --sleep, --hibernate');
            console.log('  --user [username]                The Intel AMT login username, admin is default.');
            console.log('  --tls                            Specifies that TLS must be used.');
            console.log('  --bootdevice [pxe|hdd|cd|http]   Specifies the boot device to use after reset, poweron or powercycle.');
            console.log('  --bootindex [number]             Specifies the index of boot device to use.');
            console.log('  --booturl [url]                  Specifies HTTPS URL to boot from.');
        } else if (action == 'amtnetwork') {
            console.log('AmtNetwork is used to get/set Intel AMT network interface configuration. Example usage:\r\n\r\n  meshcmd amtnetwork --host 1.2.3.4 --user admin --pass mypassword --dhcp');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --ipsync [0 or 1]         Change the wired IPSync setting on Intel AMT 7+');
            console.log('  --dhcp                    Change IPv4 wired interface to DHCP mode');
            console.log('  --static                  Change IPv4 wired interface to static IP mode');
            console.log('    --ip [1.2.3.4]          Static IPv4 address (required)');
            console.log('    --subnet [1.2.3.4]      Static IPv4 subnet mask');
            console.log('    --gateway [1.2.3.4]     Static IPv4 default gateway');
            console.log('    --dns [1.2.3.4]         Primary DNS IPv4 address');
            console.log('    --dns2 [1.2.3.4]        Secondary DNS IPv4 address');
        } else if (action == 'amtfeatures') {
            console.log('AmtFeatures is used to get/set Intel AMT feature configuration. Example usage:\r\n\r\n  meshcmd amtfeatures --host 1.2.3.4 --user admin --pass mypassword --tls --redir 1');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --consent [none/kvm/all]  Set Intel AMT user consent feature.');
            console.log('  --redir [0/1]             Set Intel AMT redirection port feature.');
            console.log('  --kvm [0/1]               Set Intel AMT KVM feature.');
            console.log('  --sol [0/1]               Set Intel AMT Serial-over-LAN feature.');
            console.log('  --ider [0/1]              Set Intel AMT IDE redirection feature.');
        } else if (action == 'meshcommander') {
            console.log('This action launched a local web server that hosts MeshCommander, a Intel AMT management console.');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --localport [port]     Local port used for the web server, 3000 is default.');
            console.log('\r\nRun as a background service:\r\n');
            console.log('  meshcommander install/uninstall/start/stop.');
        } else if (action == 'amteventlog') {
            console.log('AmtEventLog action will fetch the local or remote event log. Example usage:\r\n\r\n  meshcmd amteventlog --host 1.2.3.4 --user admin --pass mypassword --tls --output events.txt');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --output [filename]    The output file for the Intel AMT event log.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
            console.log('  --uuidoutput           Output with unique identifier as the filename.');
            console.log('  --json                 Output as a JSON format.');
        } else if (action == 'amtauditlog') {
            console.log('AmtAuditLog action will fetch the local or remote audit log. If used localy, no username/password is required. Example usage:\r\n\r\n  meshcmd amtauditlog --host 1.2.3.4 --user admin --pass mypassword --tls --output audit.json');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --output [filename]    The output file for the Intel AMT audit log.');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
            console.log('  --uuidoutput           Output with unique identifier as the filename.');
            console.log('  --json                 Output as a JSON format.');
        } else if (action == 'amtider') {
            console.log('AmtIDER will mount a local disk images to a remote Intel AMT computer. Example usage:\r\n\r\n  meshcmd amtider --host 1.2.3.4 --user admin --pass mypassword --tls --floppy disk.img --cdrom disk.iso');
            console.log('\r\nPossible arguments:\r\n');
            console.log('  --host [hostname]      The IP address or DNS name of Intel AMT.');
            console.log('  --user [username]      The Intel AMT login username, admin is default.');
            console.log('  --pass [password]      The Intel AMT login password.');
            console.log('  --tls                  Specifies that TLS must be used.');
            console.log('  --floppy [file]        Specifies .img file to be mounted as a flppy disk.');
            console.log('  --cdrom [file]         Specifies .img file to be mounted as a CDROM disk.');
            console.log('  --timeout [seconds]    Optional, disconnect after number of seconds without disk read.');
        } else if (action == 'amtscan') {
            console.log('AmtSCAN will look for Intel AMT device on the network. Example usage:\r\n\r\n  meshcmd amtscan --scan 192.168.1.0/24');
            console.log('\r\Required arguments:\r\n');
            console.log('  --scan [ip range]      The IP address range to perform the scan on.');
        } else if (action == 'amtwifi') {
            console.log('AmtWifi is used to get/set Intel AMT Wifi configuration. Example usage:\r\n\r\n  meshcmd amtwifi --host 1.2.3.4 --user admin --pass mypassword --list');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('  --[action]                Action options are list, add, del.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --list                    List Wifi profiles');
            console.log('  --add                     Add new Wifi profile');
            console.log('     --name                 New Wifi profile name');
            console.log('     --priority             Priority of this profile - default 0');
            console.log('     --ssid                 Wifi SSID');
            console.log('     --auth                 Wifi Authentication method (4 - WPA, 6 - WPA2/RSN) - default 6');
            console.log('     --enc                  Wifi Encryption type (3 - TKIP, 4 - CCMP) - default 3');
            console.log('     --psk                  Wifi password/pre-shared key');
            console.log('  --del [profile-name]      Delete new Wifi profile');
        } else if (action == 'amtwake') {
            console.log('AmtWake is used to view/set/remote Intel AMT Wake Alarms. Example usage:\r\n\r\n  meshcmd amtwake --host 1.2.3.4 --user admin --pass mypassword --list');
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('  --[action]                Action options are list, add, del.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --list                    List wake alarms profile');
            console.log('  --add [alarm-name]        Add new wake alarm');
            console.log('     --date [yyyy-mm-dd]    Alarm date in year-month-day format');
            console.log('     --time (hh:mm:ss)      Optional alarm time in hours:minutes:seconds format, default is 00:00:00.');
            console.log('     --interval (dd-hh-mm)  Optional alarm interval in days-hours-minutes format, default is alarm once.');
            console.log('     --deletewhendone       Indicates alarm is removed once triggered, default is to no remove.');
            console.log('  --del [alarm-name]        Remove a wake alarm');
        } else if (action == 'amtcert') {
            console.log("AmtCert is used to list/add/remove certificates stored by AMT. Example usage:\r\n\r\n meshcmd amtcert --host 1.2.3.4 --user admin --pass mypassword --list");
            console.log('\r\nRequired arguments:\r\n');
            console.log('  --host [hostname]         The IP address or DNS name of Intel AMT, 127.0.0.1 is default.');
            console.log('  --pass [password]         The Intel AMT login password.');
            console.log('  --[action]                Action options are list, add-trusted, add, del.');
            console.log('\r\nOptional arguments:\r\n');
            console.log('  --user [username]         The Intel AMT login username, admin is default.');
            console.log('  --tls                     Specifies that TLS must be used.');
            console.log('  --list                    List stored certificates');
            console.log('  --add [pemfile]           Add new certificate');
            console.log('  --addtrusted [pemfile]    Add new reusted certificate');
            console.log('  --del [certname]          Remove certificate named certname');
        } else {
            actions.shift();
            console.log('Invalid action, usage:\r\n\r\n  meshcmd help [action]\r\n\r\nValid actions are: ' + actions.join(', ') + '.');
        }
        exit(1); return;
    }
    settings.action = settings.action.toLowerCase();
    debug(1, "Settings: " + JSON.stringify(settings));

    // Setup the proxy if needed
    if ((typeof settings.proxy) == 'string') {
        var proxy = settings.proxy.split(':'), proxyport = (proxy.length == 2) ? parseInt(proxy[1]) : 0;
        if ((proxy.length != 2) || (proxy[0].length < 1) || (proxyport < 1) || (proxyport > 65535)) { console.log('Invalid \"proxy\" specified, use --proxy [hostname]:[port].'); exit(1); return; }
        try { require('global-tunnel').initialize({ host: proxy[0], port: proxyport }); } catch (ex) { console.log(ex); exit(1); return; }
        console.log('Proxy set to ' + proxy[0] + ':' + proxyport);
    }

    if (settings.action == 'amtstartconfig') {
        // Start Intel AMT configuration
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.startConfiguration(function (state) {
            if (state == 3) { console.log("Intel AMT is not in correct mode."); }
            else if (state == 1) { console.log("Intel AMT internal error."); }
            else if (state == 48) { console.log("Random generator not ready."); }
            else if (state == 49) { console.log("Certificate not ready."); }
            else if (state == 0) { console.log("Success."); }
            else { console.log("Unknown status: " + state); }
            exit(1);
        });
    } else if (settings.action == 'amtstopconfig') {
        // Stop Intel AMT configuration
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.stopConfiguration(function (state) {
            if (state == 3) { console.log("Intel AMT is not in in-provisionning mode."); }
            else if (state == 1) { console.log("Intel AMT internal error."); }
            else if (state == 0) { console.log("Success."); }
            else { console.log("Unknown status: " + state); }
            exit(1);
        });
    } else if (settings.action == 'smbios') {
        // Display SM BIOS tables in raw form
        SMBiosTables = require('smbios');
        SMBiosTables.get(function (data) {
            var r = SMBiosTables.parse(data);
            var out = objToString(r, 0, '\r\n');
            if (settings.output == null) { console.log(out); } else { var file = fs.openSync(settings.output, 'w'); fs.writeSync(file, Buffer.from(out, 'utf8')); fs.closeSync(file); }
            exit(1);
        });
    } else if (settings.action == 'rawsmbios') {
        // Display SM BIOS tables in raw form
        SMBiosTables = require('smbios');
        SMBiosTables.get(function (data) {
            var out = '';
            for (var i in data) { var header = false; for (var j in data[i]) { if (data[i][j].length > 0) { if (header == false) { out += ('Table type #' + i + ((SMBiosTables.smTableTypes[i] == null) ? '' : (', ' + SMBiosTables.smTableTypes[i]))) + '\r\n'; header = true; } out += ('  ' + data[i][j].toString('hex')) + '\r\n'; } } }
            if (settings.output == null) { console.log(out); } else { var file = fs.openSync(settings.output, 'w'); fs.writeSync(file, Buffer.from(out, 'utf8')); fs.closeSync(file); }
            exit(1);
        });
    } else if (settings.action == 'route') {
        // MeshCentral Router, port map local TCP port to a remote computer
        if ((settings.localport == null) || (typeof settings.localport != 'number') || (settings.localport < 0) || (settings.localport > 65535)) { console.log('No or invalid \"localPort\" specified, use --localport [localport].'); exit(1); return; }
        if ((settings.remotenodeid == null) || (typeof settings.remotenodeid != 'string')) { console.log('No or invalid \"remoteNodeId\" specified.'); exit(1); return; }
        if (((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) && (settings.authcookie == null || typeof settings.authcookie != 'string' || settings.authcookie == '')) { console.log('No or invalid \"username\" specified, use --username [username].'); exit(1); return; }
        if (((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) && (settings.authcookie == null || typeof settings.authcookie != 'string' || settings.authcookie == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.serverid == null) || (typeof settings.serverid != 'string') || (settings.serverid.length != 96)) { console.log('No or invalid \"serverId\" specified.'); exit(1); return; }
        if ((settings.serverhttpshash == null) || (typeof settings.serverhttpshash != 'string') || (settings.serverhttpshash.length != 96)) { console.log('No or invalid \"serverHttpsHash\" specified.'); exit(1); return; }
        if ((settings.remoteport == null) || (typeof settings.remoteport != 'number') || (settings.remoteport < 0) || (settings.remoteport > 65535)) { console.log('No or invalid \"remotePort\" specified, use --remoteport [remoteport].'); exit(1); return; }
        if (settings.serverurl != null) { startRouter(); } else { discoverMeshServer(); } // Start MeshCentral Router
    } else if ((settings.action == 'amtloadwebapp') || (settings.action == 'amtloadsmallwebapp') || (settings.action == 'amtloadlargewebapp') || (settings.action == 'amtclearwebapp') || (settings.action == 'amtstoragestate')) { // Intel AMT Web Application Actions
        // Intel AMT 11.6+ Load MeshCommander into firmware
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { settings.hostname = '127.0.0.1'; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        digest = require('http-digest').create(settings.username, settings.password);
        digest.http = require('http');
        if (settings.action == 'amtstoragestate') {
            getAmtStorage(function (statusCode, data) { if (statusCode == 200) { console.log("Storage State: " + JSON.stringify(data, null, 2)); exit(); return; } else { console.log("Unable to read storage state."); exit(); return; } });
        } else {
            if (settings.action == 'amtloadwebapp') { settings.webapp = Medium_IntelAmtWebApp; }
            else if (settings.action == 'amtloadsmallwebapp') { settings.webapp = Small_IntelAmtWebApp; }
            else if (settings.action == 'amtloadlargewebapp') { settings.webapp = Large_IntelAmtWebApp; }
            else if (settings.action == 'amtclearwebapp') { settings.webapp = null; }
            nextStepStorageUpload();
        }
    } else if ((settings.action == 'amtversion') || (settings.action == 'amtversions') || (settings.action == 'amtver')) {
        // Display Intel ME versions
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getVersion(function (val) {
            console.log("BIOS Version = " + val.BiosVersion.toString());
            for (var version in val.Versions) {
                var extras = '', skuBits = ['', 'iQST', 'ASF', 'AMT', 'ISM', 'TPM', '', '', 'HomeIT', '', 'WOX', '', '', 'AT-p', 'Corporate', 'L3 Mgt Upgrade'];
                if (val.Versions[version].Description == 'Sku') {
                    var n = parseInt(val.Versions[version].Version), x = [], xx = 1;
                    for (var i = 0; i < skuBits.length; i++) { if ((n & xx) != 0) { x.push(skuBits[i]); } xx = xx << 1; }
                    if (x.length > 0) { extras = ' (' + x.join(', ') + ')' }
                }
                console.log(val.Versions[version].Description + " = " + val.Versions[version].Version + extras);
            }
            exit(1); return;
        });
    } else if (settings.action == 'amthashes') {
        // Display Intel AMT list of trusted hashes
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getHashHandles(function (handles) {
            exitOnCount = handles.length;
            for (var i = 0; i < handles.length; ++i) {
                this.getCertHashEntry(handles[i], function (result) {
                    var certState = [];
                    if (result.isDefault) { certState.push('Default'); }
                    if (result.isActive) { certState.push('Active'); } else { certState.push('Disabled'); }
                    console.log(result.name + ', (' + certState.join(', ') + ')\r\n  ' + result.hashAlgorithmStr + ': ' + result.certificateHash);
                    if (--exitOnCount == 0) { exit(1); }
                });
            }
        });
    } else if (settings.action == 'netinfo') {
        // Display network information
        var interfaces = require('os').networkInterfaces();
        console.log(JSON.stringify(interfaces, 2, ' '));
        exit(0); return;
    } else if (settings.action == 'amtinfo') {
        // Display Intel AMT version and activation state
        mestate = {};
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        try {
            amtMei.getVersion(function (result) {
                if (result) {
                    for (var version in result.Versions) {
                        if (result.Versions[version].Description == 'AMT') { mestate.ver = result.Versions[version].Version; }
                        if (result.Versions[version].Description == 'Sku') { mestate.sku = parseInt(result.Versions[version].Version); }
                    }
                }
            });
            amtMei.getProvisioningState(function (result) { if (result) { mestate.ProvisioningState = result; } });
            amtMei.getProvisioningMode(function (result) { if (result) { mestate.ProvisioningMode = result; } });
            amtMei.getEHBCState(function (result) { if (result) { mestate.ehbc = result; } });
            amtMei.getControlMode(function (result) { if (result) { mestate.controlmode = result; } });
            amtMei.getMACAddresses(function (result) { if (result) { mestate.mac = result; } });
            amtMei.getLanInterfaceSettings(0, function (result) { if (result) { mestate.net0 = result; } });
            amtMei.getLanInterfaceSettings(1, function (result) { if (result) { mestate.net1 = result; } });
            amtMei.getUuid(function (result) { if ((result != null) && (result.uuid != null)) { mestate.uuid = result.uuid; } });
            amtMei.getRemoteAccessConnectionStatus(function (result) { if ((result != null) && (result.status == 0)) { mestate.networkStatus = result.networkStatus; mestate.remoteAccessStatus = result.remoteAccessStatus; mestate.remoteAccessTrigger = result.remoteAccessTrigger; mestate.mpsHostname = result.mpsHostname; } });
            amtMei.getDnsSuffix(function (result) {
                if (result) { mestate.dns = result; }
                if (mestate.ver && mestate.ProvisioningState && mestate.ProvisioningMode) {
                    var str = 'Intel ME v' + mestate.ver;
                    if (mestate.sku & 8) { str = 'Intel AMT v' + mestate.ver }
                    else if (mestate.sku & 16) { str = 'Intel SM v' + mestate.ver }
                    if (mestate.ProvisioningState.stateStr == 'PRE') { str += ', pre-provisioning state'; }
                    else if (mestate.ProvisioningState.stateStr == 'IN') { str += ', in-provisioning state'; }
                    else if (mestate.ProvisioningState.stateStr == 'POST') {
                        if (mestate.ProvisioningMode) {
                            if (mestate.controlmode) {
                                if (mestate.ProvisioningMode.modeStr == 'ENTERPRISE') { str += ', activated in ' + ["none", "Client Control Mode (CCM)", "Admin Control Mode (ACM)", "remote assistance mode"][mestate.controlmode.controlMode]; } else { str += ', activated in ' + mestate.ProvisioningMode.modeStr; }
                            } else {
                                str += ', activated in ' + mestate.ProvisioningMode.modeStr;
                            }
                        }
                    }
                    if ((mestate.ehbc) && (mestate.ehbc.EHBC == true)) { str += ', EHBC enabled'; }
                    str += '.';
                    if (mestate.net0 != null) { str += '\r\nWired ' + ((mestate.net0.enabled == 1) ? 'Enabled' : 'Disabled') + ((mestate.net0.dhcpEnabled == 1) ? ', DHCP' : ', Static') + ', ' + mestate.net0.mac + (mestate.net0.address == '0.0.0.0' ? '' : (', ' + mestate.net0.address)); }
                    if (mestate.net1 != null) { str += '\r\nWireless ' + ((mestate.net1.enabled == 1) ? 'Enabled' : 'Disabled') + ((mestate.net1.dhcpEnabled == 1) ? ', DHCP' : ', Static') + ', ' + mestate.net1.mac + (mestate.net1.address == '0.0.0.0' ? '' : (', ' + mestate.net1.address)); }
                    if ((mestate.net0 != null) && (mestate.net0.enabled == 1)) {
                        if (mestate.dns != null) {
                            // Intel AMT has a trusted DNS suffix set, use that one.
                            str += '\r\nTrusted DNS suffix: ' + mestate.dns;
                        } else {
                            // Look for the DNS suffix for the Intel AMT Ethernet interface
                            var fqdn = null, interfaces = require('os').networkInterfaces();
                            for (var i in interfaces) {
                                for (var j in interfaces[i]) {
                                    if ((interfaces[i][j].mac == mestate.net0.mac) && (interfaces[i][j].fqdn != null) && (interfaces[i][j].fqdn != '')) { fqdn = interfaces[i][j].fqdn; }
                                }
                            }
                            if (fqdn != null) { str += '\r\nDNS suffix: ' + fqdn; }
                        }
                    }
                    if (typeof mestate.networkStatus == 'number') {
                        str += '\r\nConnection Status: ' + ['Direct', 'VPN', 'Outside'][mestate.networkStatus];
                        str += ', CIRA: ' + ['Disconnected', 'Connecting', 'Connected'][mestate.remoteAccessStatus];
                        if ((mestate.remoteAccessStatus > 0) && (mestate.mpsHostname != null) && (mestate.mpsHostname.length > 0)) {
                            str += ' to ' + mestate.mpsHostname + ', ' + ['User initiated', 'Alert', 'Periodic', 'Provisioning'][mestate.remoteAccessTrigger];
                        }
                    }
                    console.log(str + '.');
                } else {
                    console.log('Intel(R) AMT not supported.');
                }
                exit(1);
            });
        } catch (ex) { console.log("Unable to perform MEI operations, try running as administrator."); exit(1); return; }
    } else if (settings.action == 'amtinfodebug') {
        // Display Intel AMT version and activation state
        getMeiState(15, function (state) { console.log(JSON.stringify(state, null, 2)); exit(1); }); // Flags: 1 = Versions, 2 = OsAdmin, 4 = Hashes, 8 = Network
    } else if (settings.action == 'amtsavestate') {
        // Save the entire state of Intel AMT info a JSON file
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { settings.hostname = '127.0.0.1'; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((settings.output == null) || (typeof settings.output != 'string') || (settings.output == '')) { console.log('No or invalid \"output\" file specified, use --output [filename].'); exit(1); return; }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        saveEntireAmtState();
    } else if ((settings.action == 'microlms') || (settings.action == 'amtlms') || (settings.action == 'lms')) {
        // Start Intel AMT MicroLMS
        startLms(function (state) {
            console.log(['MicroLMS did not start. Must run as administrator or LMS already active.', 'MicroLMS started.', 'MicroLMS started, MeshCommander on HTTP/16994.', 'MEI error'][state]);
            if (((state == 0) || (state == 3)) && (settings.noconsole === true)) { exit(0); } else { console.log('Press ctrl-c to exit.'); }
        }, settings.noconsole !== true);
    } else if (settings.action == 'amtpresence') {
        // Heartbeat a Intel AMT watchdog
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((settings.agent == null) || (typeof settings.agent != 'string') || (settings.agent == '')) { console.log('No or invalid \"agent\" specified, use --agent [agent].'); exit(1); return; }
        performAmtAgentPresence();
    } else if (settings.action == 'amtuuid') {
        // Start running
        if (settings.hostname != null) {
            if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
            if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        getAmtUuid();
    } else if (settings.action == 'amtconfig') {
        // Start Intel AMT configuration
        if ((settings.url == null) || (typeof settings.url != 'string') || (settings.url == '')) { console.log('No MeshCentral server URL specified, use --url [url].'); exit(1); return; }
        if ((settings.id == null) || (typeof settings.id != 'string') || (settings.id == '')) { console.log('No device group identifier specified, use --id [identifier].'); exit(1); return; }
        debug(1, "Settings: " + JSON.stringify(settings));
        configureAmt();
    } else if (settings.action == 'amtccm') {
        // Start activation to CCM 
        if (((settings.password == null) || (typeof settings.password != 'string') || (settings.password == ''))) { console.log('No or invalid parameters specified, use --password [password] or --url [url].'); exit(1); return; }
        settings.protocol = 'http:';
        settings.localport = 16992;
        debug(1, "Settings: " + JSON.stringify(settings));
        activeToCCM();
    } else if (settings.action == 'amtdeactivate') {
        // Deactivate CCM
        debug(1, "Settings: " + JSON.stringify(settings));
        deactivateCCM();
    } else if (settings.action == 'amtacmdeactivate') {
        // Deactivate ACM
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.type == null) || (typeof settings.type != 'string') || (settings.type == '')) { console.log('Unprovisioning \"type\" must be specified, use --type [partial/full].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if (settings.tls == null) { settings.tls = false; }
        debug(1, "Settings: " + JSON.stringify(settings));
        deactivateACM();
    } else if (settings.action == 'meshcommander') { // Start MeshCommander
        startMeshCommander();
        //} else if (settings.action == 'amtdisable') { // Disable AMT Network Interface
        //    amtDisable();
    } else if (settings.action == 'amtscan') {
        // Scan the network for Intel AMT devices
        if ((settings.scan == null) || (typeof settings.scan != 'string') || (settings.scan == '')) { console.log('No or invalid \"scan\" specified, use --scan [ip range].'); exit(1); return; }
        console.log('Scanning: ' + settings.scan + '...');
        var AMTScannerModule = require('amt-scanner');
        var amtscanner = new AMTScannerModule(), r = '';
        amtscanner.scan(settings.scan, 2000, function (data) {
            if (data.length > 0) {
                r = '', pstates = ['NotActivated', 'InActivation', 'Activated'];
                for (var i in data) {
                    var x = data[i];
                    if (r != '') { r += '\r\n'; }
                    r += x.address + ' - Intel AMT v' + x.majorVersion + '.' + x.minorVersion;
                    if (x.provisioningState < 3) { r += (', ' + pstates[x.provisioningState]); }
                    if (x.provisioningState == 2) { r += (', ' + x.openPorts.join(', ')); }
                    r += '.';
                }
            } else {
                r = 'No Intel AMT found.';
            }
            console.log(r);
            exit(1);
        });
    } else if (settings.action == 'amtauditlog') { // Read the Intel AMT audit log
        if (settings.hostname != null) {
            if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
            if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        } else { settings.hostname = '127.0.0.1'; }
        readAmtAuditLog();
    } else if (settings.action == 'amteventlog') { // Read the Intel AMT audit log
        if (settings.hostname != null) {
            if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
            if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        } else { settings.hostname = '127.0.0.1'; }
        readAmtEventLog();
    } else if (settings.action == 'amtider') { // Remote mount IDER image
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { console.log('No or invalid \"hostname\" specified, use --hostname [password].'); exit(1); return; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((settings.floppy == null) || (typeof settings.floppy != 'string') || (settings.floppy == '')) { settings.floppy = null; }
        if ((settings.cdrom == null) || (typeof settings.cdrom != 'string') || (settings.cdrom == '')) { settings.cdrom = null; }
        if ((settings.floppy == null) && (settings.cdrom == null)) { console.log('No or invalid \"floppy\" or \"cdrom\" specified, use --floppy [file] or --cdrom [file].'); exit(1); return; }
        performIder();
    } else if (settings.action == 'amtnetwork') { // Perform remote Intel AMT wired IPv4 configuration operation
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        performAmtNetConfig(args);
    } else if (settings.action == 'amtwifi') { // Perform remote Intel AMT Wifi configuration operation
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if (args.add != null) {
            if ((args.name == null) || (typeof args.name != 'string') || args.name == '') { console.log("Wifi profile name is required."); exit(1); return; }
            if ((args.ssid == null) || (typeof args.ssid != 'string') || args.ssid == '') { console.log("Wifi SSID is required."); exit(1); return; }
            if ((args.psk == null) || (typeof args.psk != 'string') || args.psk == '') { console.log("Wifi password is required."); exit(1); return; }
        }
        if (args.del != null) {
            if ((settings.name == null) || (typeof settings.name != 'string') || settings.name == '') { console.log("Wifi profile name is required."); exit(1); return; }
        }
        performAmtWifiConfig(args);
    } else if (settings.action == 'amtwake') { // Perform remote Intel AMT wake alarm operations
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((args.del != null) && ((typeof args.del != 'string') || args.del == '')) { console.log("Alarm name is required (--del [name])."); exit(1); return; }
        if (args.add != null) {
            if (((typeof args.add != 'string') || args.add == '')) { console.log("Wake alarm name is required (--add [name])."); exit(1); return; }
            if (((typeof args.date != 'string') || args.data == '')) { console.log("Wake alarm date is required (--date [yyyy-mm-dd])."); exit(1); return; }
        }
        performAmtWakeConfig(args);
    } else if (settings.action == 'amtcert') {
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        if ((args.del != null) && ((typeof args.del != 'string') || args.del == '')) { console.log("Certificate name is required (--del [name])."); exit(1); return; }
        if (args.addtrusted != null) {
            if (((typeof args.addtrusted != 'string') || args.addtrusted == '')) { console.log("Certificate file is required (--addtrusted [name])."); exit(1); return; }
        }
        if (args.add != null) {
            if (((typeof args.add != 'string') || args.add == '')) { console.log("Certificate file is required (--add [name])."); exit(1); return; }
        }
        performAmtCertConfig(args);
    } else if (settings.action == 'amtfeatures') { // Perform remote Intel AMT feature configuration operation
        if (settings.hostname == null) { settings.hostname = '127.0.0.1'; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }
        performAmtFeatureConfig(args);
    } else if (settings.action == 'amtpower') { // Perform remote Intel AMT power operation
        if ((settings.hostname == null) || (typeof settings.hostname != 'string') || (settings.hostname == '')) { console.log('No or invalid \"hostname\" specified, use --hostname [host].'); exit(1); return; }
        if ((settings.password == null) || (typeof settings.password != 'string') || (settings.password == '')) { console.log('No or invalid \"password\" specified, use --password [password].'); exit(1); return; }
        if ((settings.username == null) || (typeof settings.username != 'string') || (settings.username == '')) { settings.username = 'admin'; }

        /*
        2 = Power On
        3 = Sleep - Light
        4 = Sleep - Deep
        5 = Power Cycle (Off Soft)
        6 = Power Off - Hard
        7 = Hibernate
        8 = Power Off - Soft
        9 = Power Cycle (Off Hard)
        10 = Main Bus Reset
        11 = Diagnostic Interrupt (NMI)
        12 = Power Off - Soft Graceful
        13 = Power Off - Hard Graceful
        14 = Main Bus Reset Graceful
        15 = Power Cycle (Off - Soft Graceful)
        16 = Power Cycle (Off - Hard Graceful)
        */

        settings.poweraction = 0;
        if (args.poweron) { settings.poweraction = 2; }
        if (args.sleep) { settings.poweraction = 3; }
        if (args.powercycle) { settings.poweraction = 5; }
        if (args.poweroff) { settings.poweraction = 6; }
        if (args.hibernate) { settings.poweraction = 7; }
        if (args.reset) { settings.poweraction = 10; }
        //if (settings.poweraction == 0) { console.log('No power action, specify --poweron, --sleep, --powercycle, --poweroff, --hibernate, --reset.'); exit(1); return; }
        // Accepted option for boot device are: pxe, hdd, cd 
        var bootdevices = ['pxe','hdd','cd'];       
        if (args.bootdevice) {
            console.log() 
            if (bootdevices.indexOf(args.bootdevice.toLowerCase())>=0) {
                settings.bootdevice = args.bootdevice
                // set bootindex to 0 by default, unless overriden
                settings.bootindex = 0
            } else {
                console.log('Supported boot devices are pxe, hdd, cd'); exit(1); return; 
            }
        }
        // boot index for cd and hdd
        if (args.bootindex && args.bootindex >=0) {
            settings.bootindex = args.bootindex;
        }

        performAmtPowerAction();
    } else {
        console.log('Invalid \"action\" specified.'); exit(1); return;
    }
}

//
// Intel AMT Agent Presence
//

function performAmtAgentPresence() { startLms(function () { tempWatchdogTimer = setTimeout(performAmtAgentPresenceRegister, 3000); }); }

function performAmtAgentPresenceRegister() {
    // Setup the Intel AMT WSMAN stack
    tempWatchdogTimer = null;
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, '127.0.0.1', settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);

    // Register the watchdog
    watchdog = { DeviceID: Buffer.from(guidToStr(settings.agent.split('-').join('')).split('-').join(''), 'hex').toString('base64'), Retry: 0 };
    amtstack.AMT_AgentPresenceWatchdog_RegisterAgent(performAmtAgentPresenceRegisterRetry, watchdog, watchdog.Seq, { 'DeviceID': watchdog.DeviceID });
}

// Called after the agent is registered
function performAmtAgentPresenceRegisterRetry(stack, name, response, status, watchdog) {
    if ((status == 200) && (response.Body.SessionSequenceNumber) && (response.Body.TimeoutInterval)) {
        console.log('Asserting presence of the watchdog...');
        watchdog.Seq = response.Body.SessionSequenceNumber;
        watchdog.Interval = response.Body.TimeoutInterval * 800;
        watchdog.Retry = 0;
        tempWatchdogTimer = setTimeout(performAmtAgentPresenceAssert, watchdog.Interval);
    } else {
        debug(1, 'Failed to register, status = ' + status);
        watchdog.Retry++;
        if (watchdog.Retry < 5) {
            tempWatchdogTimer = setTimeout(function () { amtstack.AMT_AgentPresenceWatchdog_RegisterAgent(performAmtAgentPresenceRegisterRetry, watchdog, watchdog.Seq, { 'DeviceID': watchdog.DeviceID }); }, 1000);
        } else {
            console.log('Failed to register this watchdog.');
            process.exit(0);
        }
    }
}

// Start a new agent assert
function performAmtAgentPresenceAssert() {
    watchdog.Seq++;
    amtstack.AMT_AgentPresenceWatchdog_AssertPresence(watchdog.Seq, performAmtAgentPresenceAssertRetry, watchdog, 0, { 'DeviceID': watchdog.DeviceID });
}

// Called after the agent is asserted
function performAmtAgentPresenceAssertRetry(stack, name, response, status, watchdog) {
    if (status == 200) {
        debug(1, 'Successful assert, sequence = ' + watchdog.Seq);
        watchdog.Retry = 0;
        tempWatchdogTimer = setTimeout(performAmtAgentPresenceAssert, watchdog.Interval);
    } else {
        debug(1, 'Failed to assert, status = ' + status);
        watchdog.Retry++;
        if (watchdog.Retry < 5) {
            amtstack.AMT_AgentPresenceWatchdog_AssertPresence(watchdog.Seq, performAmtAgentPresenceAssertRetry, watchdog, 0, { 'DeviceID': watchdog.DeviceID });
        } else {
            console.log('Failed to assert presence on this watchdog.');
            process.exit(0);
        }
    }
}

function performAmtAgentPresenceEx5(stack, name, response, status, watchdog) {
    console.log('b', status, watchdog);
    if (status == 200) {
        watchdog.Retry = 0;
    } else {
        watchdog.Retry++;
        if (watchdog.Retry < 5) {
            amtstack.AMT_AgentPresenceWatchdog_AssertPresence(watchdog.Seq, performAmtAgentPresenceEx4, watchdog, 0, { 'DeviceID': watchdog.DeviceID });
        } else {
            console.log('Failed to assert presence on this watchdog.');
            process.exit(0);
        }
    }
}


//
// Intel AMT Event Log
//

function readAmtEventLog() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(readAmtEventLogEx);
    } else {
        readAmtEventLogEx(9999);
    }
}

function readAmtEventLogEx(x) {
    if (x == 9999) {
        var transport = require('amt-wsman-duk');
        var wsman = require('amt-wsman');
        var amt = require('amt');
        wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
        amtstack = new amt(wsstack);
        amtstack.GetMessageLog(readAmtEventLogEx2);
    } else {
        osamtstack.GetMessageLog(readAmtEventLogEx2);
    }
}

function readAmtEventLogEx2(stack, messages) {
    if (messages == null) {
        console.log('Unable to get event log.');
    } else {
        var out = '';
        if (settings.json) {
            out = JSON.stringify(messages, 4, ' ');
        } else {
            for (var i in messages) { out += messages[i].Time + ', ' + messages[i].EntityStr + ', ' + messages[i].Desc + ', ' + messages[i].EventSeverity + '\r\n'; }
        }
        if ((settings.output == null || settings.output == "") && !settings.uuidoutput) { console.log(out); exit(1); }
        else {
            try {
                if (settings.output) {
                    var file = fs.openSync(settings.output, 'w');
                    fs.writeSync(file, Buffer.from(out));
                    fs.closeSync(file);
                    exit(1);
                }
                else if (settings.uuidoutput) {
                    var destpath = null; //Dest path where messagelog file will be saved
                    if ((typeof settings.uuidoutput) == 'string') {
                        fs.statSync(settings.uuidoutput).isDirectory();//Validate directory path
                        destpath = settings.uuidoutput;
                    }
                    //Generate uuid and append it to dest path
                    stack.Get('CIM_ComputerSystemPackage', function (obj, name, response, xstatus, tag) {
                        if (xstatus == 200) {
                            var eventlogsfile = path.join(destpath, guidToStr(response.Body.PlatformGUID.toLowerCase() + '_Event' + (settings.json ? '.json' : '.csv')));
                            var file = fs.openSync(eventlogsfile, 'w');
                            fs.writeSync(file, Buffer.from(out));
                            fs.closeSync(file);
                        } else {
                            console.log('Intel AMT is not available or not activated, status = ' + status + '.');
                        } exit(1);
                    });
                }
                else {
                    console.log('Invalid action, usage:\r\n\r\n meshcmd help amtauditlog');
                    exit(1);
                }
            }
            catch (e) {
                console.log(e);
                exit(1);
            }
        }
    }
}

//
// Intel AMT Audit Log
//

function readAmtAuditLog() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(readAmtAuditLogEx);
    } else {
        readAmtAuditLogEx(9999);
    }
}

function readAmtAuditLogEx(x) {
    if (x == 9999) {
        var transport = require('amt-wsman-duk');
        var wsman = require('amt-wsman');
        var amt = require('amt');
        wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
        amtstack = new amt(wsstack);
        amtstack.GetAuditLog(readAmtAuditLogEx2);
    } else {
        osamtstack.GetAuditLog(readAmtAuditLogEx2);
    }
}

function readAmtAuditLogEx2(stack, response, status) {
    if (status != 200) {
        console.log('Unable to get audit log, status = ' + status + '.');
    } else {
        var out = '';
        if (settings.json) {
            out = JSON.stringify(response, 4, ' ');
        } else {
            for (var i in response) {
                var name = ((response[i].Initiator != '') ? (response[i].Initiator + ': ') : '')
                out += (response[i].Time + ' - ' + name + response[i].Event + '\r\n');
            }
        }
        if ((settings.output == null || settings.output == "") && !settings.uuidoutput) { console.log(out); exit(1); }
        else {
            try {
                if (settings.output) {
                    var file = fs.openSync(settings.output, 'w');
                    fs.writeSync(file, Buffer.from(out));
                    fs.closeSync(file);
                    exit(1);
                }
                else if (settings.uuidoutput) {
                    var destpath = null; //Dest path where auditlog file will be saved
                    if ((typeof settings.uuidoutput) == 'string') {
                        fs.statSync(settings.uuidoutput).isDirectory();//Validate directory path
                        destpath = settings.uuidoutput;
                    }
                    //Generate uuid and append it to dest path
                    stack.Get('CIM_ComputerSystemPackage', function (obj, name, response, xstatus, tag) {
                        if (xstatus == 200) {
                            var auditlogsfile = path.join(destpath, guidToStr(response.Body.PlatformGUID.toLowerCase() + '_Audit' + (settings.json ? '.json' : '.csv')));
                            var file = fs.openSync(auditlogsfile, 'w');
                            fs.writeSync(file, Buffer.from(out));
                            fs.closeSync(file);
                        } else {
                            console.log('Intel AMT is not available or not activated, status = ' + status + '.');
                        } exit(1);
                    });
                }
                else {
                    console.log('Invalid action, usage:\r\n\r\n meshcmd help amtauditlog');
                    exit(1);
                }
            }
            catch (e) {
                console.log(e);
                exit(1);
            }
        }
    }
}

//
// Disable AMT Network
//

//function amtDisable() {
//    settings.noconsole = true;
//    startLms(amtDisableEx);
//}

//function amtDisableEx(stack, response, status) {
//    //console.log(osamtstack);
//    osamtstack.Get('AMT_EthernetPortSettings', function (stack, name, response, status) {
//        console.log(response.Body);
//    });
//}

//
// MeshCommander local web server
//

function startMeshCommander() {
    if (settings.localport == null) { settings.localport = 3000; }

    // Start the web server
    var http = require('http');
    webServer = http.createServer();
    webServer.listen(settings.localport);
    webServer.wsList = {};
    webServer.wsListIndex = 0;
    webServer.on('upgrade', function (req, socket, head) {
        //console.log("WebSocket for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/webrelay.ashx': // MeshCommander relay channel
                var ws = socket.upgradeWebSocket();
                socket.ws = ws;
                ws.wsIndex = ++webServer.wsListIndex;
                webServer.wsList[ws.wsIndex] = ws; // Keep a reference so the websocket and forwarder don't get disposed.
                ws.pause();

                // We got a new web socket connection, initiate a TCP connection to the target Intel AMT host/port.
                var webargs = parseUrlArguments(req.url);
                if (webargs.p) { webargs.p = parseInt(webargs.p); }
                if (webargs.tls) { webargs.tls = parseInt(webargs.tls); }
                if (webargs.tls1only) { webargs.tls1only = parseInt(webargs.tls1only); }
                if (webargs.port) { webargs.port = parseInt(webargs.port); }
                debug(1, 'Opening web socket connection to ' + webargs.host + ':' + webargs.port + '.');
                //console.log('Opening web socket connection to ' + webargs.host + ':' + webargs.port + '.');
                if (webargs.tls == 0) {
                    // If this is TCP (without TLS) set a normal TCP socket
                    var net = require('net');
                    ws.forwardclient = net.connect({ host: webargs.host, port: webargs.port })
                    ws.forwardclient.on('connect', function () { debug(1, 'Connected TCP to ' + webargs.host + ':' + webargs.port + '.'); this.pipe(this.ws, { end: false }); this.ws.pipe(this, { end: false }); });
                    ws.forwardclient.on('error', function () { debug(1, 'TCP connection error to ' + webargs.host + ':' + webargs.port + '.'); try { this.ws.end(); } catch (e) { } });
                    ws.forwardclient.ws = ws;
                } else {
                    // If TLS is going to be used, setup a TLS socket
                    var tls = require('tls');
                    var tlsoptions = { host: webargs.host, port: webargs.port, rejectUnauthorized: false };
                    if (webargs.tls1only == 1) { tlsoptions.secureProtocol = 'TLSv1_method'; }
                    ws.forwardclient = tls.connect(tlsoptions, function () { debug(1, 'Connected TLS to ' + webargs.host + ':' + webargs.port + '.'); this.pipe(this.ws, { end: false }); this.ws.pipe(this, { end: false }); });
                    ws.forwardclient.on('error', function () { debug(1, 'TLS connection error to ' + webargs.host + ':' + webargs.port + '.'); try { this.ws.end(); } catch (e) { } });
                    ws.forwardclient.ws = ws;
                }

                // Handle pipe closure
                ws.on('end', function () { debug(1, 'Disconnected from ' + webargs.host + ':' + webargs.port + '.'); try { this.forwardclient.end(); } catch (e) { } delete webServer.wsList[this.wsIndex]; });
                ws.forwardclient.on('end', function () { try { this.ws.end(); } catch (e) { } });

                break;
            default:
                socket.end();
                break;
        }
    });
    webServer.on('request', function (req, rsp) {
        //console.log("WebRequest for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/': // Serve MeshCommander Web Application
                var meshcommander = null;
                try { meshcommander = fs.readFileSync('meshcommander.htm'); } catch (e) { }
                if (meshcommander != null) {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Transfer-Encoding': 'chunked' });
                    rsp.end(meshcommander);
                } else {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Content-Encoding': 'gzip', 'Transfer-Encoding': 'chunked', ETag: FullSite_IntelAmtLocalWebApp_etag });
                    rsp.end(Buffer.from(FullSite_IntelAmtLocalWebApp, 'base64'));
                }
                break;
            default: // Unknown request
                rsp.statusCode = 404;
                rsp.statusMessage = "Not Found";
                rsp.end();
                break;
        }
    });
    console.log('MeshCommander running on HTTP port ' + settings.localport + '.');
    console.log('Press ctrl-c to exit.');
}


//
// Configure Intel AMT
//

function configureAmt() {
    settings.noconsole = true;
    startLms(configureAmt2, amtMei);
}

function configureAmt2() {
    getMeiState(15, function (state) { // Flags: 1 = Versions, 2 = OsAdmin, 4 = Hashes, 8 = Network
        if (state == null) { console.log('Unable to get Intel AMT state, try running as administrator.'); exit(1); return; }
        if (state.ProvisioningState == null) { console.log('Intel AMT not ready for configuration.'); exit(1); return; }
        console.log('Starting Intel AMT configuration...');

        // Add indication if the device is battery powered, this is used to show a mobile icon when adding the device
        state.isBatteryPowered = (require('identifiers').isBatteryPowered && require('identifiers').isBatteryPowered());

        // Add Intel AMT credentials if provided
        if ((typeof settings.password == 'string') && (settings.password != '')) {
            state.amtpass = settings.password;
            state.amtuser = 'admin';
            if ((typeof settings.username == 'string') && (settings.username != '')) { state.amtuser = settings.username; }
        }

        // If a description is provided, send it to the server
        if ((typeof settings.desc == 'string') && (settings.desc != '')) { state.desc = settings.desc; }

        // Connect to MPS and start APF relay
        var apfarg = {
            mpsurl: settings.url,
            mpsuser: settings.id.substring(0, 16),
            mpspass: settings.id.substring(0, 16),
            mpskeepalive: 60000,
            clientname: state.OsHostname,
            clientaddress: '127.0.0.1',
            clientuuid: state.UUID,
            conntype: 2, // 0 = CIRA, 1 = Relay, 2 = LMS. The correct value is 2 since we are performing an LMS relay.
            meiState: state
        };
        if ((apfarg.clientuuid == null) || (apfarg.clientuuid.length != 36)) {
            console.log("Unable to get Intel AMT UUID: " + apfarg.clientuuid);
            exit(1); return;
        } else {
            settings.apftunnel = require('amt-apfclient')({ debug: (settings.debuglevel > 0) }, apfarg);
            settings.apftunnel.onJsonControl = configureJsonControl;
            settings.apftunnel.onChannelClosed = function () { exit(0); }
            try {
                settings.apftunnel.connect();
                console.log("Started APF tunnel...");
            } catch (e) {
                console.log(JSON.stringify(e));
                exit(1); return;
            }
        }
    });
}

function configureJsonControl(data) {
    switch (data.action) {
        case 'console': // Display a console message
            console.log(data.msg);
            break;
        case 'mestate': // Request an updated MEI state
            getMeiState(15, function (state) { settings.apftunnel.updateMeiState(state); });
            break;
        case 'deactivate': // Request CCM deactivation
            var amtMeiModule, amtMei;
            try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { settings.apftunnel.sendMeiDeactivationState(1); break; }
            amtMei.on('error', function (e) { settings.apftunnel.sendMeiDeactivationState(1); });
            amtMei.unprovision(1, function (status) { settings.apftunnel.sendMeiDeactivationState(status); }); // 0 = Success
            break;
        case 'startTlsHostConfig': // Request start of host based TLS ACM activation
            var amtMeiModule, amtMei;
            try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { settings.apftunnel.sendStartTlsHostConfigResponse({ state: -103 }); break; }
            amtMei.on('error', function (e) { settings.apftunnel.sendStartTlsHostConfigResponse({ state: -104 }); });
            amtMei.startConfigurationHBased(Buffer.from(data.hash, 'hex'), data.hostVpn, data.dnsSuffixList, function (response) {
                settings.apftunnel.sendStartTlsHostConfigResponse(response);
            });
            break;
        case 'stopConfiguration': // Request Intel AMT stop configuration.
            var amtMeiModule, amtMei;
            try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { settings.apftunnel.sendStartTlsHostConfigResponse({ state: -103 }); break; }
            amtMei.on('error', function (e) { settings.apftunnel.sendStartTlsHostConfigResponse({ state: -104 }); });
            amtMei.stopConfiguration(function (status) {
                settings.apftunnel.sendStopConfigurationResponse(status);
            });
            break;
        case 'close': // Close the CIRA-LMS connection
            exit(0);
            break;
        default:
            console.log("MeshCmd update may be needed, unknown JSON control action: " + data.action);
            break;
    }
}


//
// Deactivate Intel AMT CCM
//

// When called, this will use MEI to deactivate Intel AMT when it's in CCM mode. Simply calls "unprovision" on MEI and checks the return code.
function deactivateCCM() {
    var amtMeiModule, amtMei;
    try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
    amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    amtMei.unprovision(1, function (status) { if (status == 0) { console.log('Success'); } else { console.log('Error ' + status); } exit(1); });
}


//
// Activate Intel AMT to CCM
//

function activeToCCM() {
    // See if MicroLMS needs to be started and setup the $$OsAdmin wsman stack
    settings.noconsole = true;
    startLms(activeToCCMEx); // TODO: Fix this so that it works even if LMS already running.
}

function activeToCCMEx(state) {
    osamtstack.BatchEnum(null, ['*AMT_GeneralSettings', '*IPS_HostBasedSetupService'], activeToCCMEx2);
}

function activeToCCMEx2(stack, name, responses, status) {
    if (status != 200) { console.log('Failed to fetch activation status, status ' + status); exit(1); }
    else if (responses['IPS_HostBasedSetupService'].response['AllowedControlModes'].length != 2) { console.log('Client control mode activation not allowed'); exit(1); }
    else { osamtstack.IPS_HostBasedSetupService_Setup(2, md5hex('admin:' + responses['AMT_GeneralSettings'].response['DigestRealm'] + ':' + settings.password).substring(0, 32), null, null, null, null, activeToCCMEx3); }
}

function activeToCCMEx3(stack, name, responses, status) {
    if (status != 200) { console.log('Failed to activate, status ' + status); }
    else if (responses.Body.ReturnValue != 0) { console.log('Client control mode activation failed: ' + responses.Body.ReturnValueStr); }
    else { console.log('Success'); exit(0); }
    exit(1);
}



//
// Deactivate Intel AMT ACM
//

// When called, this will use MEI to deactivate Intel AMT when it's in ACM mode. Calls "unprovision" on MEI and checks the return code.
function deactivateACM() {
    settings.noconsole = true;
    startLms(deactivateACMEx);
}

function deactivateACMEx() {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.Get("AMT_SetupAndConfigurationService", function (stack, name, responses, status) {
        if (status !== 200) {
            console.log('Command not allowed.  Status: ' + status);
            exit(1);
        } else {
            var sacs = responses.Body;
            if (sacs.ZeroTouchConfigurationEnabled == true) { sacs.ZeroTouchConfigurationEnabled = true; }
            amtstack.Put("AMT_SetupAndConfigurationService", sacs, function (stack, name, responses, status) {
                if (settings.type == 'full') {
                    amtstack.AMT_SetupAndConfigurationService_Unprovision(2, function (stack, name, responses, status) {
                        if (status != 200) { console.log('Failed to fully unconfigure AMT, status ' + status); exit(1); }
                        else if (responses.Body.ReturnValue != 0) { console.log('Unprovision failed: ' + responses.Body.ReturnValueStr); exit(1); }
                        else { console.log('AMT fully unprovisioned.'); exit(0); }
                    });
                } else {
                    console.log('Only full unprovision is currently supported.');
                    exit(0);
                }
                //} else if (settings.type == 'partial') {
                //    amtstack.AMT_SetupAndConfigurationService_PartialUnprovision(null, function (stack, name, responses, status) {
                //        if (status != 200) { console.log('Failed to partially unconfigure AMT, status ' + status); exit(1); }
                //        else if (responses.Body.ReturnValue != 0) { console.log('Unprovision failed: ' + responses.Body.ReturnValueStr); exit(1); }
                //        else { console.log('AMT partially unprovisioned.'); exit(0); }
                //    });
                //}
            });
        }
    });
}

//
// Get Intel AMT activation hashes
//

var trustedHashes = null;
function getTrustedHashes(amtMei, func, tag) {
    if (trustedHashes != null) { func(tag); }
    trustedHashes = [];
    amtMei.getHashHandles(function (handles) {
        var exitOnCount = handles.length;
        for (var i = 0; i < handles.length; ++i) {
            this.getCertHashEntry(handles[i], function (result) {
                if (result.isActive == 1) { trustedHashes.push(result.certificateHash.toLowerCase()); }
                if (--exitOnCount == 0) { func(tag); }
            });
        }
    });
}


//
// Get AMT UUID
//

// Called to get the UUID of Intel AMT, start by setting up MicroLMS if we are doing the operation on the local computer
function getAmtUuid() {
    if (settings.hostname == null) {
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
        amtMei.getUuid(function (result) { if ((result == null) || (result.uuid == null)) { console.log('Failed.'); } else { console.log(result.uuid); } exit(1); });
    } else {
        if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) { settings.noconsole = true; startLms(getAmtUuidEx); return; } else { getAmtUuidEx(); }
    }
}

// Fetch the computer's UUID by fetching the CIM_ComputerSystemPackage WSMAN object.
function getAmtUuidEx() {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.Get("CIM_ComputerSystemPackage", function (obj, name, response, xstatus, tag) {
        if (xstatus == 200) { console.log("GUID: " + guidToStr(response.Body.PlatformGUID.toLowerCase())); } else { console.log("Intel AMT is not available or not activated."); } exit(1);
    });
}


//
// FETCH ALL INTEL AMT STATE
//

function saveEntireAmtState2() {
    console.log('Fetching all Intel AMT state, this may take a few minutes...');
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.onProcessChanged = onWsmanProcessChanged;
    //var AllWsman = "AMT_GeneralSystemDefenseCapabilities".split(',');
    var AllWsman = "AMT_8021xCredentialContext,AMT_8021XProfile,AMT_ActiveFilterStatistics,AMT_AgentPresenceCapabilities,AMT_AgentPresenceInterfacePolicy,AMT_AgentPresenceService,AMT_AgentPresenceWatchdog,AMT_AgentPresenceWatchdogAction,AMT_AlarmClockService,IPS_AlarmClockOccurrence,AMT_AssetTable,AMT_AssetTableService,AMT_AuditLog,AMT_AuditPolicyRule,AMT_AuthorizationService,AMT_BootCapabilities,AMT_BootSettingData,AMT_ComplexFilterEntryBase,AMT_CRL,AMT_CryptographicCapabilities,AMT_EACCredentialContext,AMT_EndpointAccessControlService,AMT_EnvironmentDetectionInterfacePolicy,AMT_EnvironmentDetectionSettingData,AMT_EthernetPortSettings,AMT_EventLogEntry,AMT_EventManagerService,AMT_EventSubscriber,AMT_FilterEntryBase,AMT_FilterInSystemDefensePolicy,AMT_GeneralSettings,AMT_GeneralSystemDefenseCapabilities,AMT_Hdr8021Filter,AMT_HeuristicPacketFilterInterfacePolicy,AMT_HeuristicPacketFilterSettings,AMT_HeuristicPacketFilterStatistics,AMT_InterfacePolicy,AMT_IPHeadersFilter,AMT_KerberosSettingData,AMT_ManagementPresenceRemoteSAP,AMT_MessageLog,AMT_MPSUsernamePassword,AMT_NetworkFilter,AMT_NetworkPortDefaultSystemDefensePolicy,AMT_NetworkPortSystemDefenseCapabilities,AMT_NetworkPortSystemDefensePolicy,AMT_PCIDevice,AMT_PETCapabilities,AMT_PETFilterForTarget,AMT_PETFilterSetting,AMT_ProvisioningCertificateHash,AMT_PublicKeyCertificate,AMT_PublicKeyManagementCapabilities,AMT_PublicKeyManagementService,AMT_PublicPrivateKeyPair,AMT_RedirectionService,AMT_RemoteAccessCapabilities,AMT_RemoteAccessCredentialContext,AMT_RemoteAccessPolicyAppliesToMPS,AMT_RemoteAccessPolicyRule,AMT_RemoteAccessService,AMT_SetupAndConfigurationService,AMT_SNMPEventSubscriber,AMT_StateTransitionCondition,AMT_SystemDefensePolicy,AMT_SystemDefensePolicyInService,AMT_SystemDefenseService,AMT_SystemPowerScheme,AMT_ThirdPartyDataStorageAdministrationService,AMT_ThirdPartyDataStorageService,AMT_TimeSynchronizationService,AMT_TLSCredentialContext,AMT_TLSProtocolEndpoint,AMT_TLSProtocolEndpointCollection,AMT_TLSSettingData,AMT_TrapTargetForService,AMT_UserInitiatedConnectionService,AMT_WebUIService,AMT_WiFiPortConfigurationService,CIM_AbstractIndicationSubscription,CIM_Account,CIM_AccountManagementCapabilities,CIM_AccountManagementService,CIM_AccountOnSystem,CIM_AdminDomain,CIM_AlertIndication,CIM_AssignedIdentity,CIM_AssociatedPowerManagementService,CIM_AuthenticationService,CIM_AuthorizationService,CIM_BIOSElement,CIM_BIOSFeature,CIM_BIOSFeatureBIOSElements,CIM_BootConfigSetting,CIM_BootService,CIM_BootSettingData,CIM_BootSourceSetting,CIM_Capabilities,CIM_Card,CIM_Chassis,CIM_Chip,CIM_Collection,CIM_Component,CIM_ComputerSystem,CIM_ComputerSystemPackage,CIM_ConcreteComponent,CIM_ConcreteDependency,CIM_Controller,CIM_CoolingDevice,CIM_Credential,CIM_CredentialContext,CIM_CredentialManagementService,CIM_Dependency,CIM_DeviceSAPImplementation,CIM_ElementCapabilities,CIM_ElementConformsToProfile,CIM_ElementLocation,CIM_ElementSettingData,CIM_ElementSoftwareIdentity,CIM_ElementStatisticalData,CIM_EnabledLogicalElement,CIM_EnabledLogicalElementCapabilities,CIM_EthernetPort,CIM_Fan,CIM_FilterCollection,CIM_FilterCollectionSubscription,CIM_HostedAccessPoint,CIM_HostedDependency,CIM_HostedService,CIM_Identity,CIM_IEEE8021xCapabilities,CIM_IEEE8021xSettings,CIM_Indication,CIM_IndicationService,CIM_InstalledSoftwareIdentity,CIM_KVMRedirectionSAP,CIM_LANEndpoint,CIM_ListenerDestination,CIM_ListenerDestinationWSManagement,CIM_Location,CIM_Log,CIM_LogEntry,CIM_LogicalDevice,CIM_LogicalElement,CIM_LogicalPort,CIM_LogicalPortCapabilities,CIM_LogManagesRecord,CIM_ManagedCredential,CIM_ManagedElement,CIM_ManagedSystemElement,CIM_MediaAccessDevice,CIM_MemberOfCollection,CIM_Memory,CIM_MessageLog,CIM_NetworkPort,CIM_NetworkPortCapabilities,CIM_NetworkPortConfigurationService,CIM_OrderedComponent,CIM_OwningCollectionElement,CIM_OwningJobElement,CIM_PCIController,CIM_PhysicalComponent,CIM_PhysicalElement,CIM_PhysicalElementLocation,CIM_PhysicalFrame,CIM_PhysicalMemory,CIM_PhysicalPackage,CIM_Policy,CIM_PolicyAction,CIM_PolicyCondition,CIM_PolicyInSystem,CIM_PolicyRule,CIM_PolicyRuleInSystem,CIM_PolicySet,CIM_PolicySetAppliesToElement,CIM_PolicySetInSystem,CIM_PowerManagementCapabilities,CIM_PowerManagementService,CIM_PowerSupply,CIM_Privilege,CIM_PrivilegeManagementCapabilities,CIM_PrivilegeManagementService,CIM_ProcessIndication,CIM_Processor,CIM_ProtocolEndpoint,CIM_ProvidesServiceToElement,CIM_Realizes,CIM_RecordForLog,CIM_RecordLog,CIM_RedirectionService,CIM_ReferencedProfile,CIM_RegisteredProfile,CIM_RemoteAccessAvailableToElement,CIM_RemoteIdentity,CIM_RemotePort,CIM_RemoteServiceAccessPoint,CIM_Role,CIM_RoleBasedAuthorizationService,CIM_RoleBasedManagementCapabilities,CIM_RoleLimitedToTarget,CIM_SAPAvailableForElement,CIM_SecurityService,CIM_Sensor,CIM_Service,CIM_ServiceAccessBySAP,CIM_ServiceAccessPoint,CIM_ServiceAffectsElement,CIM_ServiceAvailableToElement,CIM_ServiceSAPDependency,CIM_ServiceServiceDependency,CIM_SettingData,CIM_SharedCredential,CIM_SoftwareElement,CIM_SoftwareFeature,CIM_SoftwareFeatureSoftwareElements,CIM_SoftwareIdentity,CIM_StatisticalData,CIM_StorageExtent,CIM_System,CIM_SystemBIOS,CIM_SystemComponent,CIM_SystemDevice,CIM_SystemPackaging,CIM_UseOfLog,CIM_Watchdog,CIM_WiFiEndpoint,CIM_WiFiEndpointCapabilities,CIM_WiFiEndpointSettings,CIM_WiFiPort,CIM_WiFiPortCapabilities,IPS_AdminProvisioningRecord,IPS_ClientProvisioningRecord,IPS_HostBasedSetupService,IPS_HostIPSettings,IPS_IderSessionUsingPort,IPS_IPv6PortSettings,IPS_KVMRedirectionSettingData,IPS_KvmSessionUsingPort,IPS_ManualProvisioningRecord,IPS_OptInService,IPS_ProvisioningAuditRecord,IPS_ProvisioningRecordLog,IPS_RasSessionUsingPort,IPS_ScreenSettingData,IPS_SecIOService,IPS_SessionUsingPort,IPS_SolSessionUsingPort,IPS_TLSProvisioningRecord".split(',');
    IntelAmtEntireStateProgress = 101;
    IntelAmtEntireStateCalls = 3;
    IntelAmtEntireState = { 'localtime': Date(), 'utctime': new Date().toUTCString(), 'isotime': new Date().toISOString() };
    amtstack.BatchEnum(null, AllWsman, saveEntireAmtStateOk2, null, true);
    amtstack.GetAuditLog(saveEntireAmtStateOk3);
    amtstack.GetMessageLog(saveEntireAmtStateOk4);
}

// Save the entire Intel AMT state
function saveEntireAmtState() {
    // See if MicroLMS needs to be started
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true;
        startLms().then(saveEntireAmtState2);
    } else {
        saveEntireAmtState2();
    }
}

function onWsmanProcessChanged(a, b) { var x = Math.floor((a * 100) / b); if (x < IntelAmtEntireStateProgress) { IntelAmtEntireStateProgress = x; console.log((100 - x) + '%'); } }
function saveEntireAmtStateOk2(stack, name, responses, status) { if (status == 600) { console.log('ERROR: Unable to connect to Intel(R) AMT.'); exit(2); } IntelAmtEntireState['wsmanenums'] = responses; saveEntireAmtStateDone(); }
function saveEntireAmtStateOk3(stack, messages, status) { if (status == 600) { console.log('ERROR: Unable to connect to Intel(R) AMT.'); exit(2); } IntelAmtEntireState['auditlog'] = messages; saveEntireAmtStateDone(); }
function saveEntireAmtStateOk4(stack, messages, tag, status) { if (status == 600) { console.log('ERROR: Unable to connect to Intel(R) AMT.'); exit(2); } IntelAmtEntireState['eventlog'] = messages; saveEntireAmtStateDone(); }

// Called when the entire state of Intel AMT is fetched.
function saveEntireAmtStateDone() {
    if (--IntelAmtEntireStateCalls != 0) return;
    var out = fs.openSync(settings.output, 'w');
    fs.writeSync(out, Buffer.from(JSON.stringify(IntelAmtEntireState)));
    fs.closeSync(out);
    console.log('Done, results written to ' + settings.output + '.');
    exit(1);
}


//
// FETCH ALL INTEL AMT MEI STATE
//

// Get Intel AMT information using MEI
// TODO: If this call is called many time at once, it's going to cause issues.
var getAmtInfoFetching = null;
var getAmtInfoFetchingTimer = null;
function getAmtInfo(func, tag) {
    if (amtMei == null) { if (func != null) { func(null, tag); } return; }
    if (getAmtInfoFetching != null) { getAmtInfoFetching.push({ f: func, t: tag }); return; }
    getAmtInfoFetching = [{ f: func, t: tag }];
    amtMeiTmpState = { Flags: 0, TrustedHashes: [] }; // Flags: 1=EHBC, 2=CCM, 4=ACM
    getAmtInfoFetchingTimer = setTimeout(function () {
        // MEI failed to respond, break out and reset everthing.
        for (var i in getAmtInfoFetching) { if (getAmtInfoFetching[i].f != null) { getAmtInfoFetching[i].f(amtMeiTmpState, getAmtInfoFetching[i].t); } }
        getAmtInfoFetching = null;
        getAmtInfoFetchingTimer = null;
        var amtMeiModule, amtMei;
        try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
        amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    }, 3000);
    amtMei.getProtocolVersion(function (result) { if (result != null) { amtMeiTmpState.MeiVersion = result; } });
    amtMei.getVersion(function (val) {
        amtMeiTmpState.Versions = {};
        if (val != null) {
            for (var version in val.Versions) { amtMeiTmpState.Versions[val.Versions[version].Description] = val.Versions[version].Version; }
            amtMei.getProvisioningMode(function (result) { if (result != null) { amtMeiTmpState.ProvisioningMode = result.mode; } });
            amtMei.getProvisioningState(function (result) { if (result != null) { amtMeiTmpState.ProvisioningState = result.state; } });
            amtMei.getEHBCState(function (result) { if ((result != null) && (result.EHBC == true)) { amtMeiTmpState.Flags += 1; } });
            amtMei.getControlMode(function (result) { if (result != null) { if (result.controlMode == 1) { amtMeiTmpState.Flags += 2; } if (result.controlMode == 2) { amtMeiTmpState.Flags += 4; } } });
            //amtMei.getMACAddresses(function (result) { if (result != null) { amtMeiTmpState.mac = result; } });
            amtMei.getDnsSuffix(function (result) { if (result != null) { amtMeiTmpState.dns = result; } });
            amtMei.getHashHandles(function (handles) {
                exitOnCount = handles.length;
                for (var i = 0; i < handles.length; ++i) {
                    amtMei.getCertHashEntry(handles[i], function (result) {
                        amtMeiTmpState.TrustedHashes.push({ Active: result.isActive, Default: result.isDefault, HashAlgorithm: result.hashAlgorithm, Name: result.name, Hash: result.certificateHash });
                        if (--exitOnCount == 0) {
                            amtMeiTmpState.Notifications = lmsNotifications; amtMeiState = amtMeiTmpState;
                            for (var i in getAmtInfoFetching) { if (getAmtInfoFetching[i].f != null) { getAmtInfoFetching[i].f(amtMeiTmpState, getAmtInfoFetching[i].t); } }
                            getAmtInfoFetching = null;
                            clearTimeout(getAmtInfoFetchingTimer);
                            getAmtInfoFetchingTimer = null;
                        }
                    });
                }
            });
        } else {
            amtMeiState = amtMeiTmpState;
            amtMeiState.ProvisioningMode = -858993460;
            amtMeiState.TrustedHashes = {};
            amtMeiState.Notifications = lmsNotifications;
            //console.log('getAmtInfo3', JSON.stringify(amtMeiState));
            if (func != null) { func(amtMeiState, tag); }
        }
    });
}


//
// MicroLMS
//

var lmsControlSockets = {};
var lmsControlSocketsNextId = 1;
var lmsNotifications = [];
var amtLms = null;
var promise = require('promise');

function startLms(func, lmscommander, tag) {
    var ret = new promise(function (res, rej) { this._res = res; this._rej = rej; });
    var lme_heci = null
    try { lme_heci = require('amt-lme'); } catch (ex) { }
    if (lme_heci == null) { if (func != null) { func(0, tag); } this.promise._res(); return; }

    //var amtLms = null;
    var http = require('http');

    console.log('Setting up MEI...');
    try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { console.log(ex); exit(1); return; }
    amtMei.on('error', function (e) { console.log('ERROR: ' + e); exit(1); return; });
    //console.log("PTHI Connected.");

    console.log('Setting up LME...');
    try { amtLms = new lme_heci({ debug: settings.lmsdebug }); } catch (ex) { if (func != null) { func(0, tag); } return; }
    amtLms.promise = ret;
    amtLms.on('error', function (e) {
        //console.log('LME connection failed', e);
        if (lmscommander === true) { //settings.noconsole !== true) {
            startMeshCommanderLms();
            //console.log("LMS started, MeshCommander on HTTP/16994.");
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 2, tag); }, 100);
        } else {
            //console.log('LME connection failed: ' + JSON.stringify(e));
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 0, tag); }, 100);
        }
        this.promise._res();
    });
    amtLms.on('notify', function (data, options, str, code) {
        if (code == 'iAMT0052-3') {
            kvmGetData();
        } else if (str != null) {
            var notify = { date: Date.now(), str: str, code: code };
            lmsNotifications.push(notify);
            while (lmsNotifications.length > 100) { lmsNotifications.shift(); }
            var notifyBuf = Buffer.concat([Buffer.from('0900', 'hex'), Buffer.from(JSON.stringify(notify))]) // Add a notification
            for (var i in lmsControlSockets) { lmsControlSockets[i].write(notifyBuf); }
        }
    });
    //console.log('LME Connecting...');
    amtLms.on('bind', function (mapping) {
        if (mapping[16992]) { this.removeAllListeners('bind'); } else { return; }
        //console.log('LMS Bounded');
        amtLms.connected = true;
        this.promise._res();

        //console.log("LME Connected.");
        if (settings.noconsole !== true) {
            startMeshCommanderLms();
            //console.log("LMS started, MeshCommander on HTTP/16994.");
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 2, tag); }, 100);
            //console.logReferenceCount(tempTimer);
        } else {
            //console.log("LMS started.");
            tempTimer = setTimeout(function () { delete tempTimer; setupMeiOsAdmin(func, 1, tag); }, 100);
            //console.logReferenceCount(tempTimer);
        }

    });
    return (ret);
}

function startMeshCommanderLms() {

    amtLms.meshCommander = http.createServer();
    amtLms.meshCommander.listen(16994);
    amtLms.meshCommander.on('upgrade', function (req, socket, head) {
        //console.log("WebSocket for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/lms.ashx': // MeshCommander control channel (PTHI)
                socket.ws = socket.upgradeWebSocket();
                socket.ws.on('data', processLmsControlData);
                socket.ws.on('end', function () { if (lmsControlSockets[this.id]) { delete lmsControlSockets[this.id]; /*console.log('removeControl', JSON.stringify(lmsControlSockets));*/ } });
                var id = lmsControlSocketsNextId++;
                lmsControlSockets[id] = socket.ws;
                socket.ws.id = id;
                //socket.ws.write(Buffer.concat([Buffer.from('0900', 'hex'), Buffer.from(JSON.stringify(lmsNotifications))])); // Send out full list of notifications
                //console.log('addControl', JSON.stringify(lmsControlSockets));
                break;
            case '/webrelay.ashx': // MeshCommander data channel (LME)
                socket.ws = socket.upgradeWebSocket();
                if (amtLms.connected == true) {
                    // Route traffic directly into MicroLMS
                    amtLms.bindDuplexStream(socket.ws, 'IPv4', 16992);
                } else {
                    // Route traffic to real LMS service
                    var net = require('net');
                    socket.relay = net.connect({ host: '127.0.0.1', port: 16992 })
                    socket.relay.on('connect', function () {
                        socket.ws.on('data', function (data) { socket.relay.write(data); });
                        socket.ws.on('end', function () { socket.relay.end(); });
                    });
                    socket.relay.on('data', function (data) { socket.ws.write(data); });
                    socket.relay.on('close', function () { socket.ws.end(); });
                }
                break;
            default:
                socket.end();
                break;
        }
    });
    amtLms.meshCommander.on('request', function (req, rsp) {
        //console.log("WebRequest for " + req.url.split('?')[0]);
        switch (req.url.split('?')[0]) {
            case '/': // Serve MeshCommander Web Application for LMS
                var lmscommander = null;
                try { lmscommander = fs.readFileSync('lmscommander.htm'); } catch (e) { }
                if (lmscommander != null) {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Transfer-Encoding': 'chunked' });
                    rsp.end(lmscommander);
                } else {
                    rsp.writeHead(200, 'OK', { Server: 'JSLMS', 'Cache-Control': 'max-age=0, no-cache', 'X-Frame-Options': 'DENY', 'Content-Type': 'text/html', 'Content-Encoding': 'gzip', 'Transfer-Encoding': 'chunked', ETag: _IntelAmtWebApp_etag });
                    rsp.end(Buffer.from(_IntelAmtWebApp, "base64"));
                }
                break;
            default: // Unknown request
                rsp.statusCode = 404;
                rsp.statusMessage = "Not Found";
                rsp.end();
                break;
        }

    });
}

function setupMeiOsAdmin(func, state, tag) {
    if (amtMei == null) {
        if (func) { func(state, tag); }
    } else {
        amtMei.getLocalSystemAccount(function (x) {
            if ((x == null) || (x.user == null) || (x.pass == null)) { if (func) { func(state, tag); } return; } // No OsAdmin, stop here.
            var transport = require('amt-wsman-duk');
            var wsman = require('amt-wsman');
            var amt = require('amt');
            oswsstack = new wsman(transport, '127.0.0.1', 16992, x.user, x.pass, false);
            osamtstack = new amt(oswsstack);
            if (func) { func(state, tag); }

            //var AllWsman = "CIM_SoftwareIdentity,IPS_SecIOService,IPS_ScreenSettingData,IPS_ProvisioningRecordLog,IPS_HostBasedSetupService,IPS_HostIPSettings,IPS_IPv6PortSettings".split(',');
            //osamtstack.BatchEnum(null, AllWsman, startLmsWsmanResponse, null, true);
            //*************************************

            // Setup KVM data channel if this is Intel AMT 12 or above
            amtMei.getVersion(function (x) {
                var amtver = null;
                try { for (var i in x.Versions) { if (x.Versions[i].Description == 'AMT') amtver = parseInt(x.Versions[i].Version.split('.')[0]); } } catch (e) { }
                if ((amtver != null) && (amtver >= 12)) {
                    kvmGetData('skip'); // Clear any previous data, this is a dummy read to about handling old data.
                    tempTimer = setInterval(function () { kvmGetData(); }, 2000); // Start polling for KVM data.
                    kvmSetData(JSON.stringify({ action: 'restart', ver: 1 })); // Send a restart command to advise the console if present that MicroLMS just started.
                }
            });
        });
    }
}

function kvmGetData(tag) {
    osamtstack.IPS_KVMRedirectionSettingData_DataChannelRead(kvmDataGetResponse, tag);
}

function kvmDataGetResponse(stack, name, response, status, tag) {
    if ((tag != 'skip') && (status == 200) && (response.Body.ReturnValue == 0)) {
        var val = null;
        try { val = Buffer.from(response.Body.DataMessage, 'base64').toString(); } catch (e) { return }
        if (val != null) { kvmProcessData(response.Body.RealmsBitmap, response.Body.MessageId, val); }
    }
}

var webRtcDesktop = null;
function kvmProcessData(realms, messageId, val) {
    var data = null;
    try { data = JSON.parse(val) } catch (e) { }
    if ((data != null) && (data.action)) {
        if (data.action == 'present') { kvmSetData(JSON.stringify({ action: 'present', ver: 1, platform: process.platform })); }
        if (data.action == 'offer') {
            webRtcDesktop = {};
            var rtc = require('ILibWebRTC');
            webRtcDesktop.webrtc = rtc.createConnection();
            webRtcDesktop.webrtc.on('connected', function () { });
            webRtcDesktop.webrtc.on('disconnected', function () { webRtcCleanUp(); });
            webRtcDesktop.webrtc.on('dataChannel', function (rtcchannel) {
                webRtcDesktop.rtcchannel = rtcchannel;
                var kvmmodule = require('meshDesktop');
                webRtcDesktop.kvm = kvmmodule.getRemoteDesktopStream();
                webRtcDesktop.kvm.pipe(webRtcDesktop.rtcchannel, { dataTypeSkip: 1, end: false });
                webRtcDesktop.rtcchannel.on('end', function () { webRtcCleanUp(); });
                webRtcDesktop.rtcchannel.on('data', function (x) { kvmCtrlData(this, x); });
                webRtcDesktop.rtcchannel.pipe(webRtcDesktop.kvm, { dataTypeSkip: 1, end: false });
                //webRtcDesktop.kvm.on('end', function () { console.log('WebRTC DataChannel closed2'); webRtcCleanUp(); });
                //webRtcDesktop.rtcchannel.on('data', function (data) { console.log('WebRTC data: ' + data); });
            });
            kvmSetData(JSON.stringify({ action: 'answer', ver: 1, sdp: webRtcDesktop.webrtc.setOffer(data.sdp) }));
        }
    }
}

// Polyfill path.join
var path = {
    join: function () {
        var x = [];
        for (var i in arguments) {
            var w = arguments[i];
            if (w != null) {
                while (w.endsWith('/') || w.endsWith('\\')) { w = w.substring(0, w.length - 1); }
                if (i != 0) {
                    while (w.startsWith('/') || w.startsWith('\\')) { w = w.substring(1); }
                }
                x.push(w);
            }
        }
        if (x.length == 0) return '/';
        return x.join('/');
    }
};

// Get a formated response for a given directory path
function getDirectoryInfo(reqpath) {
    var response = { path: reqpath, dir: [] };
    if (((reqpath == undefined) || (reqpath == '')) && (process.platform == 'win32')) {
        // List all the drives in the root, or the root itself
        var results = null;
        try { results = fs.readDrivesSync(); } catch (e) { } // TODO: Anyway to get drive total size and free space? Could draw a progress bar.
        //console.log('a', objToString(results, 0, ' '));
        if (results != null) {
            for (var i = 0; i < results.length; ++i) {
                var drive = { n: results[i].name, t: 1 };
                if (results[i].type == 'REMOVABLE') { drive.dt = 'removable'; } // TODO: See if this is USB/CDROM or something else, we can draw icons.
                response.dir.push(drive);
            }
        }
    } else {
        // List all the files and folders in this path
        if (reqpath == '') { reqpath = '/'; }
        var xpath = path.join(reqpath, '*');
        var results = null;

        try { results = fs.readdirSync(xpath); } catch (e) { }
        if (results != null) {
            for (var i = 0; i < results.length; ++i) {
                if ((results[i] != '.') && (results[i] != '..')) {
                    var stat = null, p = path.join(reqpath, results[i]);
                    try { stat = fs.statSync(p); } catch (e) { } // TODO: Get file size/date
                    if ((stat != null) && (stat != undefined)) {
                        if (stat.isDirectory() == true) {
                            response.dir.push({ n: results[i], t: 2, d: stat.mtime });
                        } else {
                            response.dir.push({ n: results[i], t: 3, s: stat.size, d: stat.mtime });
                        }
                    }
                }
            }
        }
    }
    return response;
}

// Process KVM control channel data
function kvmCtrlData(channel, cmd) {
    if (cmd.length > 0 && cmd.charCodeAt(0) != 123) {
        // This is upload data
        if (this.fileupload != null) {
            cmd = Buffer.from(cmd, 'base64');
            var header = cmd.readUInt32BE(0);
            if ((header == 0x01000000) || (header == 0x01000001)) {
                fs.writeSync(this.fileupload.fp, cmd.slice(4));
                channel.write({ action: 'upload', sub: 'ack', reqid: this.fileupload.reqid });
                if (header == 0x01000001) { fs.closeSync(this.fileupload.fp); this.fileupload = null; } // Close the file
            }
        }
        return;
    }
    //console.log('KVM Ctrl Data', cmd);

    try { cmd = JSON.parse(cmd); } catch (ex) { console.error('Invalid JSON: ' + cmd); return; }
    if ((cmd.path != null) && (process.platform != 'win32') && (cmd.path[0] != '/')) { cmd.path = '/' + cmd.path; } // Add '/' to paths on non-windows
    switch (cmd.action) {
        case 'ping': {
            // This is a keep alive
            channel.write({ action: 'pong' });
            break;
        }
        case 'ls': {
            /*
            // Close the watcher if required
            var samepath = ((this.httprequest.watcher != undefined) && (cmd.path == this.httprequest.watcher.path));
            if ((this.httprequest.watcher != undefined) && (samepath == false)) {
                //console.log('Closing watcher: ' + this.httprequest.watcher.path);
                //this.httprequest.watcher.close(); // TODO: This line causes the agent to crash!!!!
                delete this.httprequest.watcher;
            }
            */

            // Send the folder content to the browser
            var response = getDirectoryInfo(cmd.path);
            if (cmd.reqid != undefined) { response.reqid = cmd.reqid; }
            channel.write(response);

            /*
            // Start the directory watcher
            if ((cmd.path != '') && (samepath == false)) {
                var watcher = fs.watch(cmd.path, onFileWatcher);
                watcher.tunnel = this.httprequest;
                watcher.path = cmd.path;
                this.httprequest.watcher = watcher;
                //console.log('Starting watcher: ' + this.httprequest.watcher.path);
            }
            */
            break;
        }
        case 'mkdir': {
            // Create a new empty folder
            fs.mkdirSync(cmd.path);
            break;
        }
        case 'rm': {
            // Remove many files or folders
            for (var i in cmd.delfiles) {
                var fullpath = path.join(cmd.path, cmd.delfiles[i]);
                try { fs.unlinkSync(fullpath); } catch (e) { console.log(e); }
            }
            break;
        }
        case 'rename': {
            // Rename a file or folder
            var oldfullpath = path.join(cmd.path, cmd.oldname);
            var newfullpath = path.join(cmd.path, cmd.newname);
            try { fs.renameSync(oldfullpath, newfullpath); } catch (e) { console.log(e); }
            break;
        }
        case 'download': {
            // Download a file, to browser
            var sendNextBlock = 0;
            if (cmd.sub == 'start') { // Setup the download
                if (this.filedownload != null) { channel.write({ action: 'download', sub: 'cancel', id: this.filedownload.id }); delete this.filedownload; }
                this.filedownload = { id: cmd.id, path: cmd.path, ptr: 0 }
                try { this.filedownload.f = fs.openSync(this.filedownload.path, 'rbN'); } catch (e) { channel.write({ action: 'download', sub: 'cancel', id: this.filedownload.id }); delete this.filedownload; }
                if (this.filedownload) { channel.write({ action: 'download', sub: 'start', id: cmd.id }); }
            } else if ((this.filedownload != null) && (cmd.id == this.filedownload.id)) { // Download commands
                if (cmd.sub == 'startack') { sendNextBlock = 8; } else if (cmd.sub == 'stop') { delete this.filedownload; } else if (cmd.sub == 'ack') { sendNextBlock = 1; }
            }
            // Send the next download block(s)
            while (sendNextBlock > 0) {
                sendNextBlock--;
                var buf = Buffer.alloc(4096);
                var len = fs.readSync(this.filedownload.f, buf, 4, 4092, null);
                this.filedownload.ptr += len;
                if (len < 4092) { buf.writeInt32BE(0x01000001, 0); fs.closeSync(this.filedownload.f); delete this.filedownload; sendNextBlock = 0; } else { buf.writeInt32BE(0x01000000, 0); }
                channel.write(buf.slice(0, len + 4).toString('base64')); // Write as Base64
            }
            break;
        }
        case 'upload': {
            // Upload a file, from browser
            if (cmd.sub == 'start') { // Start the upload
                if (this.fileupload != null) { fs.closeSync(this.fileupload.fp); }
                if (!cmd.path || !cmd.name) break;
                this.fileupload = { reqid: cmd.reqid };
                var filepath = path.join(cmd.path, cmd.name);
                try { this.fileupload.fp = fs.openSync(filepath, 'wbN'); } catch (e) { }
                if (this.fileupload.fp) { channel.write({ action: 'upload', sub: 'start', reqid: this.fileupload.reqid }); } else { this.fileupload = null; channel.write({ action: 'upload', sub: 'error', reqid: this.fileupload.reqid }); }
            }
            else if (cmd.sub == 'cancel') { // Stop the upload
                if (this.fileupload != null) { fs.closeSync(this.fileupload.fp); this.fileupload = null; }
            }
            break;
        }
        case 'copy': {
            // Copy a bunch of files from scpath to dspath
            for (var i in cmd.names) {
                var sc = path.join(cmd.scpath, cmd.names[i]), ds = path.join(cmd.dspath, cmd.names[i]);
                if (sc != ds) { try { fs.copyFileSync(sc, ds); } catch (e) { } }
            }
            break;
        }
        case 'move': {
            // Move a bunch of files from scpath to dspath
            for (var i in cmd.names) {
                var sc = path.join(cmd.scpath, cmd.names[i]), ds = path.join(cmd.dspath, cmd.names[i]);
                if (sc != ds) { try { fs.copyFileSync(sc, ds); fs.unlinkSync(sc); } catch (e) { } }
            }
            break;
        }
        default:
            // Unknown action, ignore it.
            break;
    }
}

function webRtcCleanUp() {
    if (webRtcDesktop == null) return;
    if (webRtcDesktop.rtcchannel) {
        try { webRtcDesktop.rtcchannel.close(); } catch (e) { }
        try { webRtcDesktop.rtcchannel.removeAllListeners('data'); } catch (e) { }
        try { webRtcDesktop.rtcchannel.removeAllListeners('end'); } catch (e) { }
        delete webRtcDesktop.rtcchannel;
    }
    if (webRtcDesktop.webrtc) {
        try { webRtcDesktop.webrtc.close(); } catch (e) { }
        try { webRtcDesktop.webrtc.removeAllListeners('connected'); } catch (e) { }
        try { webRtcDesktop.webrtc.removeAllListeners('disconnected'); } catch (e) { }
        try { webRtcDesktop.webrtc.removeAllListeners('dataChannel'); } catch (e) { }
        delete webRtcDesktop.webrtc;
    }
    if (webRtcDesktop.kvm) {
        try { webRtcDesktop.kvm.end(); } catch (e) { }
        delete webRtcDesktop.kvm;
    }
    webRtcDesktop = null;
}

function kvmSetData(x) {
    osamtstack.IPS_KVMRedirectionSettingData_DataChannelWrite(Buffer.from(x).toString('base64'), function () { });
}

function startLmsWsmanResponse(stack, name, responses, status) {
    if (status == 600) { console.log("ERROR: Unable to connect to Intel(R) AMT."); }
    else if (status != 200) { console.log("ERROR: Unable to get object from Intel(R) AMT, status = " + status + "."); }
    else {
        //console.log(JSON.stringify(responses), status);
        var amtlogicalelements = responses['CIM_SoftwareIdentity'].responses;
        if (amtlogicalelements.length > 0) {
            var v = getInstance(amtlogicalelements, 'AMT')['VersionString'];
            amtversion = parseInt(v.split('.')[0]);
            amtversionmin = parseInt(v.split('.')[1]);
            //console.log(amtversion, amtversionmin);
        }
    }
}


// Process commands in the LMS control channel
// Command 9 is add a notification.
function processLmsControlData(data) {
    if (data.length < 2) return;
    var cmdid = data.readUInt16LE(0);
    switch (cmdid) {
        case 1: // Request basic Intel AMT information (CMD = 1)
            { getAmtInfo(function (meinfo, socket) { meinfo.LoginMode = 2; socket.write(Buffer.concat([Buffer.from('0100', 'hex'), Buffer.from(JSON.stringify(meinfo))])); }, this); break; }
        case 2: // Intel AMT MEI Unprovision (CMD = 2)
            { if (data.length < 6) break; amtMei.unprovision(data.readUInt32LE(2), function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(2, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 3: // Intel AMT MEI GetLocalSystemAccount (CMD = 3)
            { amtMei.getLocalSystemAccount(function (account, socket) { socket.write(Buffer.concat([Buffer.from('030000000000', 'hex'), account.raw])); }, this); break; }
        case 4: // Instruct Intel AMT to start remote configuration (CMD = 4)
            { amtMei.startConfiguration(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 5: // Instruct Intel AMT to stop remote configuration (CMD = 5)
            { amtMei.stopConfiguration(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 6: // Instruct Intel AMT connect CIRA (CMD = 6)
            { amtMei.openUserInitiatedConnection(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 7: // Instruct Intel AMT disconnect CIRA (CMD = 7)
            { amtMei.closeUserInitiatedConnection(function (status, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(7, 0); data.writeUInt32LE(status, 2); socket.write(data); }, this); break; }
        case 8: // Get Intel AMT CIRA State (CMD = 8)
            { amtMei.getRemoteAccessConnectionStatus(function (state, socket) { var data = Buffer.alloc(6); data.writeUInt16LE(8, 0); data.writeUInt32LE(state.status, 2); socket.write(Buffer.concat([data, state.raw])); }, this); break; }
        default:
            // Unknown action, ignore it.
            break;
    }
}


//
// MeshCentral TCP port router
//

function startRouter() {
    // Start by requesting a login token, this is needed because of 2FA and check that we have correct credentials from the start
    var options;
    try {
        // Parse the URL
        options = http.parseUri(settings.serverurl.split('meshrelay.ashx').join('control.ashx'));

        // Figure out the 2FA token to use if any
        var xtoken = null;
        if (settings.emailtoken) { xtoken = '**email**'; }
        else if (settings.smstoken) { xtoken = '**sms**'; }
        else if (settings.token != null) { xtoken = settings.token; }

        // Complete the URL and add a x-meshauth header if needed
        var xurlargs = [];
        if (settings.authcookie != null) {
            xurlargs.push('auth=' + settings.authcookie);
            if (xtoken != null) { xurlargs.push('token=' + xtoken); }
        } else {
            if (xtoken != null) {
                options.headers = { 'x-meshauth': Buffer.from(settings.username,'binary').toString('base64') + ',' + Buffer.from(settings.password,'binary').toString('base64') + ',' + Buffer.from(xtoken,'binary').toString('base64') };
            } else {
                options.headers = { 'x-meshauth': Buffer.from(settings.username,'binary').toString('base64') + ',' + Buffer.from(settings.password,'binary').toString('base64') };
            }
        }
        if (settings.loginkey) { xurlargs.push('key=' + settings.loginkey); }
        if (xurlargs.length > 0) { options.path += '?' + xurlargs.join('&'); }
    } catch (e) { console.log("Unable to parse \"serverUrl\"."); process.exit(1); return; }

    options.checkServerIdentity = onVerifyServer;
    options.rejectUnauthorized = false;
    settings.websocket = http.request(options);
    settings.websocket.upgrade = OnServerWebSocket;
    settings.websocket.on('error', function (e) { console.log("ERROR: " + JSON.stringify(e)); });
    settings.websocket.end();
}

function OnServerWebSocket(msg, s, head) {
    settings.webchannel = s;
    s.on('data', function (msg) {
        var command = JSON.parse(msg);
        switch (command.action) {
            case 'close': {
                if (command.cause == 'noauth') {
                    if (command.msg == 'tokenrequired') {
                        if (command.email2fasent === true) {
                            console.log("Login token email sent.");
                        } else if (command.email2fa === true) {
                            console.log("Login token required, use --token [token], or --emailtoken, --smstoken get a token.");
                        } else {
                            console.log("Login token required, use --token [token].");
                        }
                    } else { console.log("Invalid username or password."); }
                } else { console.log("Server disconnected: " + command.msg); }
                process.exit(1);
                return;
            }
            case 'serverinfo': {
                s.write("{\"action\":\"authcookie\"}"); // Ask for our first authentication cookie
                break;
            }
            case 'authcookie': {
                if (settings.acookie == null) {
                    settings.acookie = command.cookie;
                    settings.rcookie = command.rcookie;
                    settings.renewCookieTimer = setInterval(function () { settings.webchannel.write("{\"action\":\"authcookie\"}"); }, 600000); // Ask for new cookie every 10 minutes
                    startRouterEx();
                } else {
                    settings.acookie = command.cookie;
                    settings.rcookie = command.rcookie;
                }
                break;
            }
        }
    });
    s.on('error', function () { console.log("Server connection error."); process.exit(1); return; });
    s.on('close', function () { console.log("Server closed the connection."); process.exit(1); return; });
}

function startRouterEx() {
    tcpserver = net.createServer(OnTcpClientConnected);
    tcpserver.on('error', function (e) { console.log("ERROR: " + JSON.stringify(e)); exit(0); return; });
    try {
        tcpserver.listen(settings.localport, function () {
            // We started listening.
            if (settings.remotetarget == null) {
                console.log('Redirecting local port ' + settings.localport + ' to remote port ' + settings.remoteport + '.');
            } else {
                console.log('Redirecting local port ' + settings.localport + ' to ' + settings.remotetarget + ':' + settings.remoteport + '.');
            }
            console.log("Press ctrl-c to exit.");

            // If settings has a "cmd", run it now.
            //process.exec("notepad.exe");
        });
    } catch (ex) { console.log("Unable to bind to local TCP port " + settings.localport + "."); exit(1); return; }
}

// Called when a TCP connect is received on the local port. Launch a tunnel.
function OnTcpClientConnected(c) {
    try {
        // 'connection' listener
        debug(1, "Client connected");
        c.on('end', function () { disconnectTunnel(this, this.websocket, "Client closed"); });
        c.pause();
        var options;
        try {
            options = http.parseUri(settings.serverurl + '?auth=' + settings.acookie + '&nodeid=' + settings.remotenodeid + '&tcpport=' + settings.remoteport + (settings.remotetarget == null ? '' : '&tcpaddr=' + settings.remotetarget));
        } catch (e) { console.log("Unable to parse \"serverUrl\"."); process.exit(1); return; }
        options.checkServerIdentity = onVerifyServer;
        options.rejectUnauthorized = false;
        c.websocket = http.request(options);
        c.websocket.tcp = c;
        c.websocket.tunneling = false;
        c.websocket.upgrade = OnWebSocket;
        c.websocket.on('error', function (e) { console.log("ERROR: " + JSON.stringify(e)); });
        c.websocket.end();
    } catch (e) { debug(2, e); }
}

// Disconnect both TCP & WebSocket connections and display a message.
function disconnectTunnel(tcp, ws, msg) {
    if (ws != null) { try { ws.end(); } catch (e) { debug(2, e); } }
    if (tcp != null) { try { tcp.end(); } catch (e) { debug(2, e); } }
    debug(1, "Tunnel disconnected: " + msg);
}

// Called when the web socket gets connected
function OnWebSocket(msg, s, head) {
    debug(1, "Websocket connected");
    s.on('data', function (msg) {
        if (this.parent.tunneling == false) {
            msg = msg.toString();
            if ((msg == 'c') || (msg == 'cr')) {
                // Pipe the connection, but don't pipe text websocket frames into the TCP socket.
                this.parent.tunneling = true; this.pipe(this.parent.tcp, { dataTypeSkip: 1 }); this.parent.tcp.pipe(this); debug(1, "Tunnel active");
            } else if ((msg.length > 6) && (msg.substring(0, 6) == 'error:')) {
                console.log(msg.substring(6));
                disconnectTunnel(this.tcp, this, msg.substring(6));
            }
        }
    });
    s.on('error', function () { disconnectTunnel(this.tcp, this, 'Websocket error'); });
    s.on('close', function () { disconnectTunnel(this.tcp, this, 'Websocket closed'); });
    s.parent = this;
}

// Try to discover the location of the mesh server
function discoverMeshServer() { console.log("Looking for server..."); discoveryInterval = setInterval(discoverMeshServerOnce, 5000); discoverMeshServerOnce(); }

// Try to discover the location of the mesh server only once
function discoverMeshServerOnce() {
    var interfaces = os.networkInterfaces();
    for (var adapter in interfaces) {
        if (interfaces.hasOwnProperty(adapter)) {
            for (var i = 0; i < interfaces[adapter].length; ++i) {
                var addr = interfaces[adapter][i];
                multicastSockets[i] = dgram.createSocket({ type: (addr.family == 'IPv4' ? 'udp4' : 'udp6') });
                multicastSockets[i].bind({ address: addr.address, exclusive: false });
                if (addr.family == 'IPv4') {
                    try {
                        multicastSockets[i].addMembership(membershipIPv4);
                        //multicastSockets[i].setMulticastLoopback(true);
                        multicastSockets[i].once('message', OnMulticastMessage);
                        multicastSockets[i].send(settings.serverid, 16989, membershipIPv4);
                    } catch (e) { }
                }
            }
        }
    }
}

// Called when a multicast packet is received
function OnMulticastMessage(msg, rinfo) {
    var m = msg.toString().split('|');
    if ((m.length == 3) && (m[0] == 'MeshCentral2') && (m[1] == settings.serverid)) {
        settings.serverurl = m[2].replace('%s', rinfo.address).replace('/agent.ashx', '/meshrelay.ashx');
        console.log("Found server at " + settings.serverurl + ".");
        if (discoveryInterval != null) { clearInterval(discoveryInterval); discoveryInterval = null; }
        startRouter();
    }
}


//
// PUSH MESHCOMMANDER INTO FIRMWARE
//

function nextStepStorageUpload() {
    debug(3, "nextStepStorageUpload");
    getAmtStorage(function (statusCode, data) {
        if (statusCode == 200) {
            debug(2, "getAmtStorage: " + JSON.stringify(data, null, 2));
            if ((data['content'] != null) && (data['content']['index.htm'] != null)) { nextStepStorageUpload3('index.htm'); }
            else if ((data['content'] != null) && (data['content']['logon.htm'] != null)) { nextStepStorageUpload3('logon.htm'); }
            else if ((data['content'] != null) && (data['content']['logon.htm'] != null)) { nextStepStorageUpload3('logon.htm'); }
            else { nextStepStorageUpload2('index.htm', null); }
        } else {
            console.log("Unable to read storage state.");
            exit();
            return;
        }
    });
}

function nextStepStorageUpload2(uploadName, linkName) {
    debug(3, "nextStepStorageUpload2");
    if (settings.webapp == null) { console.log("Done."); exit(); return; } else {
        console.log("Uploading MeshCommander...");
        pushToStorage(uploadName, linkName, Buffer.from(settings.webapp, 'base64'), function (statusCode) {
            if (statusCode == 500) { console.log("Error, check that computer is powered on."); exit(); return; }
            if (statusCode != 200) {
                if (uploadName == 'index.htm') {
                    nextStepStorageUpload2('mesh/commander/console', 'MeshCommander');
                } else {
                    console.log("Unable to upload MeshCommander, status = " + statusCode + "."); exit(); return;
                }
            } else {
                console.log("Verifying MeshCommander...");
                verifyStorage(uploadName, Buffer.from(settings.webapp, 'base64'), function (verified) {
                    if (verified == true) { console.log("Done."); } else { console.log("MeshCommander verification failed."); }
                    exit(); return;
                });
            }
        });
    }
}

function nextStepStorageUpload3(deleteName) {
    console.log("Deleting " + deleteName + " from storage...");
    deleteStorage(deleteName, function (statusCode) {
        if (statusCode == 500) { console.log("Error, check that computer is powered on."); exit(); return; }
        if (statusCode == 200) { nextStepStorageUpload(); } else { console.log("Unable to delete " + deleteName + "."); exit(); return; }
    });
}

// Fetch the Intel AMT storage document
function getAmtStorage(func, noretry) {
    var req = digest.request({ protocol: settings.protocol, method: 'GET', host: settings.hostname, path: '/amt-storage/', port: settings.localport },
        function (response) {
            if (response.statusCode != 200) { console.log("Unable to connect to Intel(R) AMT."); func(response.statusCode, null); }
            response.on('data', function (chunk) { if (response.acc == null) { response.acc = chunk; } else { response.acc += chunk; } });
            response.on('end', function () {
                var data = response.acc.toString(), len, data2, amtstorage = null;
                data = data.split('\t').join('').split('\r').join('').split('\n').join('');
                try {
                    do { len = data.length; data2 = data; data = data2.replace('": ', '":'); } while (data != data2); // Remove all zero's, this is needed because firmware sometimes returns garbage we must fix.
                    do { len = data.length; data2 = data; data = data2.replace('\x00', ''); } while (data != data2); // Remove all zero's, this is needed because firmware sometimes returns garbage we must fix.
                    do { len = data.length; data2 = data; data = data2.replace('\x22\x01\x22', '\x22\x22'); } while (data != data2); // "\x01", this is needed because firmware sometimes returns garbage we must fix.
                    var xopen = data.split("{").length, xclose = data.split("}").length, xadd = '';
                    while (xopen > xclose) { data += '}'; xclose++; } // Close any missing close brackets
                    amtstorage = JSON.parse(data);
                } catch (e) { console.log("Error: Unable to parse Intel AMT response: " + data, e); func(null); }
                if (func != null) { func(response.statusCode, amtstorage); }
            });
        });
    req.on('error', function (e) { console.log("Error occured: " + JSON.stringify(e)); if (noretry == true) { if (func != null) { func(null); } } else { getAmtStorage(func, true); } });
    req.end();
}

// Fetch the Intel AMT storage document
function pushToStorage(name, linkname, data, func, ptr) {
    if (ptr == null) { ptr = 0; }
    var req = digest.request({ protocol: settings.protocol, method: 'PUT', host: settings.hostname, path: ('/amt-storage/' + name + ((ptr != 0) ? '?append=' : '')), port: settings.localport });
    req.on('error', function (e) { console.log("Error occured: " + JSON.stringify(e)); if (func != null) { func(null); } });
    req.on('response', function (response) {
        debug(1, 'Chunk Done', data.length, ptr);
        if ((response.statusCode == 200) && (ptr < data.length)) { pushToStorage(name, linkname, data, func, ptr); } else { if (func != null) { func(response.statusCode); } }
    });
    var header = (ptr > 0) ? '<metadata></metadata>' : '<metadata><headers><h>Content-Encoding:gzip</h><h>Content-Type:text/html</h></headers>' + ((linkname != null) ? ('<link>' + linkname + '</link>') : '') + '</metadata>';
    var blocklen = ((data.length - ptr) > (7000 - header.length)) ? (7000 - header.length) : (data.length - ptr);
    req.write(Buffer.concat([Buffer.from(header), data.slice(ptr, ptr + blocklen)]));
    ptr += blocklen;
    req.end();
}

// Fetch the Intel AMT storage document
function verifyStorage(name, data, func) {
    var req = digest.request({ protocol: settings.protocol, method: 'GET', host: settings.hostname, path: ('/amt-storage/' + name), port: settings.localport });
    req.on('error', function (e) { console.log("Verify error occured: " + JSON.stringify(e)); if (func != null) { func(null); } });
    req.on('response', function (response) {
        response.ptr = 0;
        response.ok = true;
        response.on('data', function (data2) { if (data2.toString('hex') != data.slice(response.ptr, response.ptr + data2.length).toString('hex')) { response.ok = false; console.log('Verifiy failed (' + response.ptr + ', ' + data2.length + ').'); } response.ptr += data2.length; });
        response.on('end', function () { if (func != null) { func(response.ok); } });
    });
    req.end();
}

// Fetch the Intel AMT storage document
function deleteStorage(name, func, noretry) {
    var req = digest.request({ protocol: settings.protocol, method: 'DELETE', host: settings.hostname, path: '/amt-storage/' + name, port: settings.localport });
    req.on('error', function (e) { if ((e == "Error: Socket was unexpectedly closed") && (noretry != true)) { deleteStorage(name, func, true); } else { if (func != null) { if (e.statusCode) { func(e.statusCode); } else { func(null); } } } });
    req.on('response', function (response) { if (func != null) { func(response.statusCode); } });
    req.end();
}


//
//  IDER
//

ider = null;
iderIdleTimer = null;

// Perform IDER
function performIder() {
    if ((settings.floppy != null) && fs.existsSync(settings.floppy) == false) { console.log("Unable to floppy image file: " + settings.floppy); process.exit(); return; }
    if ((settings.cdrom != null) && fs.existsSync(settings.cdrom) == false) { console.log("Unable to CDROM image file: " + settings.cdrom); process.exit(); return; }
    try {
        var sfloppy = null, scdrom = null;
        if (settings.floppy) { try { if (sfloppy = fs.statSync(settings.floppy)) { sfloppy.file = fs.openSync(settings.floppy, 'rbN'); } } catch (ex) { console.log(ex); process.exit(1); return; } }
        if (settings.cdrom) { try { scdrom = fs.statSync(settings.cdrom); if (scdrom) { scdrom.file = fs.openSync(settings.cdrom, 'rbN'); } } catch (ex) { console.log(ex); process.exit(1); return; } }

        ider = require('amt-redir-duk')(require('amt-ider')());
        ider.onStateChanged = onIderStateChange;
        ider.m.floppy = sfloppy;
        ider.m.cdrom = scdrom;
        ider.m.iderStart = 1; // OnReboot = 0, Graceful = 1, Now = 2
        ider.m.debug = (settings.debuglevel > 0);
        if (settings.timeout > 0) { ider.m.sectorStats = iderSectorStats; }
        //ider.digestRealmMatch = wsstack.comm.digestRealm;
        //ider.tlsv1only = amtstack.wsman.comm.tlsv1only;
        ider.Start(settings.hostname, (settings.tls == true) ? 16995 : 16994, settings.username ? 'admin' : settings.username, settings.password, settings.tls);
    } catch (ex) { console.log(ex); }
}

function onIderStateChange(stack, state) { console.log(["Disconnected", "Connecting...", "Connected...", "Started IDER..."][state]); }

function iderSectorStats(mode, dev, mediaBlocks, lba, len) {
    if (iderIdleTimer != null) { clearTimeout(iderIdleTimer); }
    iderIdleTimer = setTimeout(function () { console.log("Idle timeout"); process.exit(1); }, 1000 * settings.timeout);
}

//
// Intel AMT IPv4 wired configuration
//

function performAmtNetConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtNetConfig0, false, args);
    } else {
        performAmtNetConfig0(1, args);
    }
}

function performAmtNetConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['AMT_EthernetPortSettings'], performAmtNetConfig1, args);
}

function performAmtNetConfig1(stack, name, response, status, args) {
    if (status == 200) {
        // Set wired and wireless interfaces
        var amtwirelessif = -1;
        var amtwiredif = -1;
        for (var y in response['AMT_EthernetPortSettings'].responses) {
            var z = response['AMT_EthernetPortSettings'].responses[y];
            if (z['WLANLinkProtectionLevel'] || (y == 1)) { amtwirelessif = y; } // Set the wireless interface, this seems to cover new wireless only computers and older computers with dual interfaces.
            if (y == 0) { if ((amtwirelessif != y) && (z['MACAddress'] != '00-00-00-00-00-00')) { amtwiredif = y; } } // On computers with only wireless, the wired interface will have a null MAC
        }

        // Check if configuration change is required
        if (args) {
            var docall = false;
            var x = JSON.parse(JSON.stringify(response['AMT_EthernetPortSettings'].responses[amtwiredif]));
            var y = response['AMT_EthernetPortSettings'].responses[amtwiredif];
            delete x['IpSyncEnabled'];
            delete x['LinkIsUp'];
            delete x['LinkPolicy'];
            delete x['MACAddress'];
            delete x['SharedDynamicIP'];
            delete x['SharedMAC'];
            delete x['SharedStaticIp'];

            if ((y['IpSyncEnabled'] == false) && (args.ipsync === '1')) { x['IpSyncEnabled'] = true; docall = true; }
            if ((y['IpSyncEnabled'] == true) && (args.ipsync === '0')) { x['IpSyncEnabled'] = false; docall = true; }
            if (args.dhcp && (amtwiredif != -1) && (response['AMT_EthernetPortSettings'].responses[amtwiredif].DHCPEnabled == false)) {
                // Change to DHCP
                x['DHCPEnabled'] = true;
                docall = true;
            }
            else if (args.static && (amtwiredif != -1) && (response['AMT_EthernetPortSettings'].responses[amtwiredif].DHCPEnabled == true)) {
                // Change to STATIC
                x['DHCPEnabled'] = false;
                if (args.ip) { x['IPAddress'] = args.ip; } else { console.log("Missing IPv4 address, use --ip 1.2.3.4"); process.exit(1); }
                if (args.subnet) { x['SubnetMask'] = args.subnet; } else { console.log("Missing IPv4 subnet, use --subnet 255.255.255.0"); process.exit(1); }
                if (args.gateway) { x['DefaultGateway'] = args.gateway; }
                if (args.dns) { x['PrimaryDNS'] = args.dns; }
                if (args.dns2) { x['SecondaryDNS'] = args.dns2; }
                docall = true;
            }
            if (docall) {
                if (x['DHCPEnabled'] == true) {
                    delete x['IPAddress'];
                    delete x['DefaultGateway'];
                    delete x['PrimaryDNS'];
                    delete x['SecondaryDNS'];
                    delete x['SubnetMask'];
                }
                pendingAmtConfigActions++;
                //console.log(JSON.stringify(x, 4, ' '));
                amtstack.Put('AMT_EthernetPortSettings', x, function (stack, name, response, status) { if (status != 200) { console.log("Error, status " + status + "."); } if (--pendingAmtConfigActions == 0) { performAmtNetConfig0(); } }, null, 0, x);
            }
        }

        if (pendingAmtConfigActions == 0) {
            var maxlen = 0;
            if (amtwiredif != -1) { for (var i in response['AMT_EthernetPortSettings'].responses[amtwiredif]) { if (i.length > maxlen) { maxlen = i.length; } } }
            if (amtwirelessif != -1) { for (var i in response['AMT_EthernetPortSettings'].responses[amtwirelessif]) { if (i.length > maxlen) { maxlen = i.length; } } }

            if (amtwiredif != -1) { // Wired
                var z = response['AMT_EthernetPortSettings'].responses[amtwiredif];
                console.log("--WIRED---");
                for (var i in z) {
                    if (['ElementName', 'InstanceID'].indexOf(i) == -1) {
                        var name = i;
                        while (name.length < maxlen) { name += ' '; }
                        console.log(name + ' : ' + z[i]);
                    }
                }
            }
            if (amtwirelessif != -1) { // Wireless
                var z = response['AMT_EthernetPortSettings'].responses[amtwirelessif];
                console.log("--WIRELESS---");
                for (var i in z) {
                    if (['ElementName', 'InstanceID'].indexOf(i) == -1) {
                        var name = i;
                        while (name.length < maxlen) { name += ' '; }
                        console.log(name + ' : ' + z[i]);
                    }
                }
            }
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

//
// Intel AMT Wifi configuration
//

function performAmtWifiConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtWifiConfig0, false, args);
    } else {
        performAmtWifiConfig0(1, args);
    }
}

function performAmtWifiConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['CIM_WiFiEndpointSettings'], performAmtWifiConfig1, args);
}

function performAmtWifiConfig1(stack, name, response, status, args) {
    if (status == 200) {
        var wifiAuthMethod = { 1: "Other", 2: "Open", 3: "Shared Key", 4: "WPA PSK", 5: "WPA 802.1x", 6: "WPA2 PSK", 7: "WPA2 802.1x", 32768: "WPA3 802.1x" };
        var wifiEncMethod = { 1: "Other", 2: "WEP", 3: "TKIP", 4: "CCMP", 5: "None" }
        var wifiProfiles = {};
        for (var y in response['CIM_WiFiEndpointSettings'].responses) {
            var z = response['CIM_WiFiEndpointSettings'].responses[y];
            var n = z['ElementName'];
            wifiProfiles[n] = { 'Priority': z['Priority'], 'SSID': z['SSID'], 'AuthenticationMethod': z['AuthenticationMethod'], 'EncryptionMethod': z['EncryptionMethod'] };
        }

        if (args) {
            if (args.list) {
                console.log('List of Intel AMT Wifi profiles:');
                if (wifiProfiles.length == 0) {
                    console.log('No Wifi profiles is stored.');
                }
                for (var t in wifiProfiles) {
                    var w = wifiProfiles[t];
                    console.log('Profile Name: ' + t + '; Priority: ' + w['Priority'] + '; SSID: ' + w['SSID'] + '; Security: ' + wifiAuthMethod[w['AuthenticationMethod']] + '/' + wifiEncMethod[w['EncryptionMethod']]);
                }
                process.exit(0);
            } else if (args.add) {
                if (args.auth == null) { args.auth = 6; } // if not set, default to WPA2 PSK
                if (args.enc == null) { args.enc = 3; } // if not set, default to TKIP
                if (args.priority == null) { args.priority = 0; } // if not set, default to 0

                var wifiep = {
                    __parameterType: 'reference',
                    __resourceUri: 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_WiFiEndpoint',
                    Name: 'WiFi Endpoint 0'
                };

                var wifiepsettinginput = {
                    __parameterType: 'instance',
                    __namespace: 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_WiFiEndpointSettings',
                    ElementName: args.name,
                    InstanceID: 'Intel(r) AMT:WiFi Endpoint Settings ' + args.name,
                    AuthenticationMethod: args.auth,
                    EncryptionMethod: args.enc,
                    SSID: args.ssid,
                    Priority: args.priority,
                    PSKPassPhrase: args.psk
                }
                stack.AMT_WiFiPortConfigurationService_AddWiFiSettings(wifiep, wifiepsettinginput, null, null, null,
                    function (stck, nm, resp, sts) {
                        if (sts == 200) {
                            console.log("Wifi profile " + args.name + " successfully added.");
                        } else {
                            console.log("Failed to add wifi profile " + args.name + ".");
                        }
                        process.exit(0);
                    });
            } else if (args.del) {
                if (wifiProfiles[args.name] == null) {
                    console.log("Profile " + args.name + " could not be found.");
                    process.exit(0);
                }
                stack.Delete('CIM_WiFiEndpointSettings', { InstanceID: 'Intel(r) AMT:WiFi Endpoint Settings ' + args.name },
                    function (stck, nm, resp, sts) {
                        if (sts == 200) {
                            console.log("Wifi profile " + args.name + " successfully deleted.");
                        } else {
                            console.log("Failed to delete wifi profile " + args.name + ".");
                        }
                        process.exit(0);
                    },
                    0, 1);
            }
        } else {
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

//
// Intel AMT wake alarm configuration
//

function _fmtdatetime(str) {
    return str.replace('T', ' ').replace('Z', '');
}

function _fmtinterval(str) {
    var cl = str.replace('T', '').substring(str.indexOf('P') + 1);
    cl = ' ' + cl.replace('D', " days ").replace('H', " hours ").replace('M', " minutes ");
    cl = cl.replace(" 1 days ", " 1 day ").replace(" 1 hours ", " 1 hour ").replace(" 1 minutes ", " 1 minute ");
    return cl.substring(0, cl.length - 1);
}

function _fmttimepad(str) {
    str = '' + str;
    while (str.length < 2) { str = '0' + str; }
    return str;
}

function convertAmtDataStr(str) {
    var timeArray = str.split('Z').join('').split('T').join('-').split(':').join('-').split('-');
    return new Date(timeArray[0], timeArray[1] - 1, timeArray[2], timeArray[3], timeArray[4], timeArray[5]);
}

function prepareAlarmOccurenceTemplate(id, nm, start, interval, del) {
    return '<d:AlarmTemplate xmlns:d=\"http://intel.com/wbem/wscim/1/amt-schema/1/AMT_AlarmClockService\" xmlns:s=\"http://intel.com/wbem/wscim/1/ips-schema/1/IPS_AlarmClockOccurrence\"><s:InstanceID>' + id + '</s:InstanceID><s:StartTime><p:Datetime xmlns:p=\"http://schemas.dmtf.org/wbem/wscim/1/common\">' + start + '</p:Datetime></s:StartTime><s:Interval><p:Interval xmlns:p=\"http://schemas.dmtf.org/wbem/wscim/1/common\">' + interval + '</p:Interval></s:Interval><s:DeleteOnCompletion>' + del + '</s:DeleteOnCompletion></d:AlarmTemplate>';
}

function performAmtWakeConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtWakeConfig0, false, args);
    } else {
        performAmtWakeConfig0(1, args);
    }
}

function performAmtWakeConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['IPS_AlarmClockOccurrence'], performAmtWakeConfig1, args);
}

function performAmtWakeConfig1(stack, name, response, status, args) {
    if (status == 200) {
        var response = response['IPS_AlarmClockOccurrence'].responses;
        if (!args) { process.exit(0); return; }
        if (args.list) {
            if (response.length == 0) {
                console.log('No wake alarms.');
            } else {
                for (var i = 0; i < response.length; i++) {
                    var waketime = convertAmtDataStr(response[i]['StartTime']['Datetime']);
                    var t = waketime.toLocaleString(), tx = t.indexOf('.');
                    if (tx >= 0) { t = t.substring(0, tx); }
                    var details = response[i]['ElementName'] + ', wake on ' + t.replace(' ', ' at ');
                    if (response[i]['Interval'] != null) { details += ' and each' + _fmtinterval(response[i]['Interval']['Interval']); }
                    if (response[i]['DeleteOnCompletion'] == true) { details += ", delete when done"; }
                    console.log(details);
                }
            }
            process.exit(0);
        } else if (args.del) {
            // Remove a wake alarm, start by looking to see if it exists
            var alarmFound = false;
            for (var i = 0; i < response.length; i++) { if (response[i]['ElementName'] == args.del) { alarmFound = true; } }
            if (alarmFound == false) { console.log("Wake alarm " + args.del + " could not be found."); process.exit(0); return; }
            // Remote the alarm
            stack.Delete('IPS_AlarmClockOccurrence', { InstanceID: args.del },
                function (stck, nm, resp, sts) {
                    if (sts == 200) { console.log("Done."); } else { console.log("Failed to delete wake alarm " + args.del + "."); }
                    process.exit(0);
                },
                0, 1);
        } else if (args.add) {
            // Add a wake alarm
            var alarmFound = false;
            for (var i = 0; i < response.length; i++) { if (response[i]['ElementName'] == args.add) { alarmFound = true; } }
            if (alarmFound) { console.log("Wake alarm " + args.add + " already exists."); process.exit(0); return; }
            if (typeof args.time != 'string') { args.time = '00:00:00'; }
            if (typeof args.interval != 'string') { args.interval = ''; }
            var alarm_name = args.add;
            var x1 = args.date.split('-');
            var x2 = args.time.split(':');
            var t = new Date(x1[0], x1[1] - 1, x1[2], x2[0], x2[1], 0, 0); // Not sure why, but month is 0 = JAN, 11 = DEC, seconds must be 00.
            var alarm_starttime = _fmttimepad(t.getFullYear()) + '-' + _fmttimepad(t.getMonth() + 1) + '-' + _fmttimepad(t.getDate()) + 'T' + _fmttimepad(t.getHours()) + ':' + _fmttimepad(t.getMinutes()) + ':' + _fmttimepad(t.getSeconds()) + 'Z';
            var x = args.interval.split('-');
            if (x.length != 3) { x = [0, 0, 0]; }
            var alarm_interval = 'P' + x[0] + 'DT' + x[1] + 'H' + x[2] + 'M';
            var alarm_doc = (args.deletewhendone != null);
            var tpl = prepareAlarmOccurenceTemplate(alarm_name, alarm_name, alarm_starttime, alarm_interval, alarm_doc);
            stack.wsman.ExecMethodXml(amtstack.CompleteName('AMT_AlarmClockService'), 'AddAlarm', tpl,
                function (ws, resuri, response, status) {
                    if (status != 200) { console.log("Failed to add alarm. Status: " + status + ". Verify the alarm is for a future time."); }
                    else if (response.Body['ReturnValue'] != 0) { console.log("Failed to add alarm " + response.Body['ReturnValueStr'] + ". Verify the alarm is for a future time."); }
                    else { console.log("Done."); }
                    process.exit(0);
                }
            );
        } else {
            console.log("Unknown action, specify --list, --del or --add.");
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

//
// Intel AMT certificate management
//

function performAmtCertConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtCertConfig0, false, args);
    } else {
        performAmtCertConfig0(1, args);
    }
}

function performAmtCertConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['AMT_PublicKeyCertificate'], performAmtCertConfig1, args);
}

function getCN(subject) {
    if (subject !=null && typeof(subject) == 'string') {
        var str_arr = subject.split(',');
        for (var i=0; i< str_arr.length;i++) {
            if (str_arr[i].startsWith("CN=")) {
                return str_arr[i].substring(3).trim()
            }
        }
    }
    return ""
}

function performAmtCertConfig1(stack, name, response, status, args) {
    if (status == 200) {
        var response = response['AMT_PublicKeyCertificate'].responses;
        if (!args) { process.exit(0); return; }
        if (args.list) {
            //console.log(JSON.stringify(response,"",3))
            if (response.length == 0) {
                console.log("No certificate is stored in AMT.")
            } else {
                console.log("List of certificates in AMT certificate storage.")
                console.log("------------------------------------------------")
                for (var i=0; i< response.length; i++) {
                    var trusted = response[i]["TrustedRootCertficate"];
                    var certname = getCN(response[i]["Subject"]);                    
                    console.log(certname + (trusted? " (trusted)": ""));
                }
            }
            process.exit(0);
        } else if (args.del) {
            if (response.length == 0) {
                console.log("Certificate "+ args.del +" is not found.")
                process.exit(0)
            } else {
                //console.log(JSON.stringify(response,"",3))
                var cert_instance = null
                for (var i=0; i< response.length; i++) {
                    var certname = getCN(response[i]["Subject"]);
                    if (certname == args.del) {
                        cert_instance = response[i]
                    }
                }
                if (cert_instance != null) {
                    stack.Delete('AMT_PublicKeyCertificate', cert_instance, function (stck, nm, resp, sts) {
                        if (sts == 200) {
                            console.log("Certificate " + args.del + " successfully deleted.");
                        } else {
                            console.log("Failed to delete certificate " + args.del + ".");
                        }
                        process.exit(0);
                    }, 0, 1);
                } else {
                    console.log("Certificate "+ args.del +" is not found.")
                    process.exit(0);
                }
            }            
        } else if (args.addtrusted) {
            var certbin = ""
            try {
                certbin = fs.readFileSync(args.addtrusted).toString();
            } catch (e) {
                console.log(e)
                process.exit(-1)
            }
            var i = certbin.indexOf('-----BEGIN CERTIFICATE-----');
            if (i >= 0) {
                certbin = certbin.substring(i + 27);
                i = certbin.indexOf('-----END CERTIFICATE-----');
                if (i >= 0) certbin = certbin.substring(0, i)
                certbin = certbin.replace(/\r\n/g, '');
                amtstack.AMT_PublicKeyManagementService_AddTrustedRootCertificate(certbin, function (stck, nm, resp, sts) {
                    if (sts == 200) {
                        console.log("Certificate " + args.addtrusted + " successfully added.");
                    } else {
                        console.log("Failed to add certificate " + args.addtrusted + ".");
                    }
                    process.exit(0);
                });                
            }
        } else if (args.add) {
            var certbin = ""
            try {
                certbin = fs.readFileSync(args.add).toString();
            } catch (e) {
                console.log(e)
                process.exit(-1)
            }
            var i = certbin.indexOf('-----BEGIN CERTIFICATE-----');
            if (i >= 0) {
                certbin = certbin.substring(i + 27);
                i = certbin.indexOf('-----END CERTIFICATE-----');
                if (i >= 0) certbin = certbin.substring(0, i)
                certbin = certbin.replace(/\r\n/g, '');
                amtstack.AMT_PublicKeyManagementService_AddCertificate(certbin, function (stck, nm, resp, sts) {
                    if (sts == 200) {
                        console.log("Certificate " + args.add + " successfully added.");
                    } else {
                        console.log("Failed to add certificate " + args.add + ".");
                    }
                    process.exit(0);
                });
            }            
        } else {
            console.log("Unknown action, specify --list, --del, --addtrusted or --add.");
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}
//
// Intel AMT feature configuration action
//

function performAmtFeatureConfig(args) {
    if ((settings.hostname == '127.0.0.1') || (settings.hostname.toLowerCase() == 'localhost')) {
        settings.noconsole = true; startLms(performAmtFeatureConfig0, false, args);
    } else {
        performAmtFeatureConfig0(1, args);
    }
}

function performAmtFeatureConfig0(state, args) {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    amtstack.BatchEnum(null, ['*IPS_OptInService', '*AMT_RedirectionService', '*CIM_KVMRedirectionSAP'], performAmtFeatureConfig1, args);
}

function performAmtFeatureConfig1(stack, name, response, status, args) {
    if (status == 200) {
        // User consent
        var optinrequired = response['IPS_OptInService'].response['OptInRequired'];
        if (args) {
            if ((args.userconsent == 'none') && (optinrequired != 0)) {
                pendingAmtConfigActions++;
                response['IPS_OptInService'].response['OptInRequired'] = 0;
                amtstack.Put('IPS_OptInService', response['IPS_OptInService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } });
            }
            else if ((args.userconsent == 'kvm') && (optinrequired != 1)) {
                pendingAmtConfigActions++;
                response['IPS_OptInService'].response['OptInRequired'] = 1;
                amtstack.Put('IPS_OptInService', response['IPS_OptInService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } });
            }
            else if ((args.userconsent == 'all') && (optinrequired != 0xFFFFFFFF)) {
                pendingAmtConfigActions++;
                response['IPS_OptInService'].response['OptInRequired'] = 0xFFFFFFFF;
                amtstack.Put('IPS_OptInService', response['IPS_OptInService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } });
            }
        }

        // Redirection ports
        var redirportchange = false;
        var redirchange = false;
        var redir = (response['AMT_RedirectionService'].response['ListenerEnabled'] == true);

        var sol = ((response['AMT_RedirectionService'].response['EnabledState'] & 2) != 0);
        var ider = ((response['AMT_RedirectionService'].response['EnabledState'] & 1) != 0);
        if (args) {
            if ((redir == false) && ((args.redir == 'enabled') || (args.redir == 1))) { response['AMT_RedirectionService'].response['ListenerEnabled'] = true; redirportchange = true; }
            if ((redir == true) && ((args.redir == 'disabled') || (args.redir == 0))) { response['AMT_RedirectionService'].response['ListenerEnabled'] = false; redirportchange = true; }
            if ((sol == false) && ((args.sol == 'enabled') || (args.sol == 1))) { sol = true; redirchange = true; }
            if ((sol == true) && ((args.sol == 'disabled') || (args.sol == 0))) { sol = false; redirchange = true; }
            if ((ider == false) && ((args.ider == 'enabled') || (args.ider == 1))) { ider = true; redirchange = true; }
            if ((ider == true) && ((args.ider == 'disabled') || (args.ider == 0))) { ider = false; redirchange = true; }
            if (redirportchange) { pendingAmtConfigActions++; amtstack.Put("AMT_RedirectionService", response['AMT_RedirectionService'].response, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } }); }
            if (redirchange) { pendingAmtConfigActions++; amtstack.AMT_RedirectionService_RequestStateChange((32768 + ((ider ? 1 : 0) + (sol ? 2 : 0))), function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } }); }
        }

        // KVM
        var kvm = false;
        var kvmchange = false;
        if (response['CIM_KVMRedirectionSAP'] != null) {
            kvm = ((response['CIM_KVMRedirectionSAP'].response["EnabledState"] == 6 && response['CIM_KVMRedirectionSAP'].response['RequestedState'] == 2) || response['CIM_KVMRedirectionSAP'].response['EnabledState'] == 2 || response['CIM_KVMRedirectionSAP'].response['EnabledState'] == 6);
            if (args) {
                if ((kvm == false) && ((args.kvm == 'enabled') || (args.kvm == 1))) { kvm = true; kvmchange = true; }
                if ((kvm == true) && ((args.kvm == 'disabled') || (args.kvm == 0))) { kvm = false; kvmchange = true; }
                if (kvmchange) { pendingAmtConfigActions++; amtstack.CIM_KVMRedirectionSAP_RequestStateChange(kvm ? 2 : 3, 0, function (stack, name, response, status) { if (--pendingAmtConfigActions == 0) { performAmtFeatureConfig0(); } }); }
            }
        }

        if (pendingAmtConfigActions == 0) {
            if (optinrequired == 0) { console.log("User Consent         : None"); }
            else if (optinrequired == 1) { console.log("User Consent         : KVM"); }
            else if (optinrequired == 0xFFFFFFFF) { console.log("User Consent         : All"); }
            else { console.log("User Consent         : " + optinrequired); }
            console.log("Redirection Port     : " + (redir ? "Enabled" : "Disabled"));
            console.log("Serial-over-LAN      : " + (sol ? "Enabled" : "Disabled"));
            console.log("IDE Redirection      : " + (ider ? "Enabled" : 'Disabled'));
            if (response['CIM_KVMRedirectionSAP'] != null) { console.log("Remote desktop (KVM) : " + (kvm ? "Enabled" : "Disabled")); }
            process.exit(0);
        }
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}


//
// Intel AMT Remote Power Action
//

function performAmtPowerAction() {
    var transport = require('amt-wsman-duk');
    var wsman = require('amt-wsman');
    var amt = require('amt');
    wsstack = new wsman(transport, settings.hostname, settings.tls ? 16993 : 16992, settings.username, settings.password, settings.tls);
    amtstack = new amt(wsstack);
    if (settings.poweraction != 0) {
        // check if there is bootdevice and the command is either poweron, powercycle or reset
        if (settings.bootdevice && [2,5,10].indexOf(settings.poweraction)>=0) {
            // change boot order
            amtstack.Get('AMT_BootSettingData', powerActionResponse1, 0, 1);
        } else {
            // Set the power state
            amtstack.RequestPowerStateChange(settings.poweraction, performAmtPowerActionEx);
        }
    } else {
        // Get the power state
        amtstack.Get('CIM_AssociatedPowerManagementService', performAmtPowerActionEx2, 0, 1);
    }
}

function powerActionResponse1(stack, name, response, status) {
    if (status !=200) { console.log("Unable to get AMT_BootSettingData"); exit(1); return;}
    var r = response.Body;
    r['ConfigurationDataReset'] = false;
    r['BIOSPause'] = false;
    r['EnforceSecureBoot'] = false;
    r['BIOSSetup'] = false;
    if (settings.bootdevice && settings.bootdevice!='pxe') {
        r['BootMediaIndex'] = settings.bootindex;
    } else {
        r['BootMediaIndex'] = 0;
    }
    r['FirmwareVerbosity'] = 0;
    r['ForcedProgressEvents'] = false;
    r['IDERBootDevice'] = 0;
    r['LockKeyboard'] = false;
    r['LockPowerButton'] = false;
    r['LockResetButton'] = false;
    r['LockSleepButton'] = false;
    r['ReflashBIOS'] = false;
    r['UseIDER'] = false;
    r['UseSOL'] = false;//
    r['UseSafeMode'] = false;
    r['UserPasswordBypass'] = false;
    if (r['SecureErase'] != null) {
        r['SecureErase'] = false; // no secure erase
    }
    if (r['PlatformErase'] != null) {
        r['PlatformErase'] = false; //disable platform erase
    }
    delete r['WinREBootEnabled'];
    delete r['UEFILocalPBABootEnabled'];
    delete r['UEFIHTTPSBootEnabled'];
    delete r['SecureBootControlEnabled'];
    delete r['BootguardStatus'];
    delete r['OptionsCleared'];
    delete r['BIOSLastStatus'];
    delete r['UefiBootParametersArray'];
    if (r['UefiBootNumberOfParams'] != null) r['UefiBootNumberOfParams'] = 0;
    // Set the boot order to null, this is needed for some AMT versions that don't clear this automatically.
    amtstack.CIM_BootConfigSetting_ChangeBootOrder(null, function (stack, name, response, status) {
        if (status != 200) { console.log('PUT CIM_BootConfigSetting_ChangeBootOrder failed'); exit(1); return; }
        if (response.Body['ReturnValue'] != 0) { console.log('(1) Change Boot Order returns '+ response.Body.ReturnValueStr); exit(1); return; }
        amtstack.Put('AMT_BootSettingData', r, powerActionResponse2, 0, 1);
    }, 0, 1);
}

function powerActionResponse2(stack, name, response, status, tag) {
    if (status != 200) { console.log('PUT AMT_BootSettingData failed.'); exit(1); return; }
    amtstack.SetBootConfigRole(1, powerActionResponse3, 0, 1);
}

function powerActionResponse3(stack, name, response, status) {
    if (status != 200) { console.log('SetBootConfigRole failed.'); exit(1); return; }
    var bootsources = { 'pxe' : 'Force PXE Boot', 'hdd' : 'Force Hard-drive Boot', 'cd' : 'Force CD/DVD Boot'};
    var cbparam='<Address xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing">http://schemas.xmlsoap.org/ws/2004/08/addressing</Address><ReferenceParameters xmlns="http://schemas.xmlsoap.org/ws/2004/08/addressing"><ResourceURI xmlns="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd">http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BootSourceSetting</ResourceURI><SelectorSet xmlns="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd"><Selector Name="InstanceID">Intel(r) AMT: ' + bootsources[settings.bootdevice] + '</Selector></SelectorSet></ReferenceParameters>';
    amtstack.CIM_BootConfigSetting_ChangeBootOrder(cbparam, function(st, nm, resp, sts) {
        if (resp.Body['ReturnValue'] != 0) { console.log('(2) Change Boot Order returns '+ response.Body.ReturnValueStr); exit(1); return; }
        amtstack.RequestPowerStateChange(settings.poweraction, performAmtPowerActionEx);
    });
}


function performAmtPowerActionEx(stack, name, response, status) {
    if (status == 200) {
        console.log(response.Body.ReturnValueStr.split('_').join(' '));
        process.exit(0);
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}

var DMTFPowerStates = ['', '', "Power on", "Light sleep", "Deep sleep", "Power cycle (Soft off)", "Off - Hard", "Hibernate (Off soft)", "Soft off", "Power cycle (Off-hard)", "Main bus reset", "Diagnostic interrupt (NMI)", "Not applicable", "Off - Soft graceful", "Off - Hard graceful", "Main bus reset graceful", "Power cycle (Off - Soft graceful)", "Power cycle (Off - Hard graceful)", "Diagnostic interrupt (INIT)"];
function performAmtPowerActionEx2(stack, name, response, status) {
    if (status == 200) {
        var powerNumber = parseInt(response.Body.PowerState);
        if ((powerNumber >= DMTFPowerStates.length) && (powerNumber > 1)) {
            console.log("Unknown power state: " + response.Body.PowerState);
        } else {
            console.log("Current power state: " + DMTFPowerStates[powerNumber]);
        }
        process.exit(0);
    } else {
        console.log("Error, status " + status + ".");
        process.exit(1);
    }
}


//
//  Get MEI state
//

// Get Intel MEI State in a flexible way
// Flags: 1 = Versions, 2 = OsAdmin, 4 = Hashes, 8 = Network
function getMeiState(flags, func) {
    var amtMeiModule, amtMei;
    try { amtMeiModule = require('amt-mei'); amtMei = new amtMeiModule(); } catch (ex) { func(null); return; }
    amtMei.on('error', function (e) { func(null); return; });
    try {
        var amtMeiTmpState = { 'core-ver': 1, OsHostname: require('os').hostname(), Flags: 0 }; // Flags: 1=EHBC, 2=CCM, 4=ACM
        amtMei.getProtocolVersion(function (result) { if (result != null) { amtMeiTmpState.MeiVersion = result; } });
        if ((flags & 1) != 0) { amtMei.getVersion(function (result) { if (result) { amtMeiTmpState.Versions = {}; for (var version in result.Versions) { amtMeiTmpState.Versions[result.Versions[version].Description] = result.Versions[version].Version; } } }); }
        amtMei.getProvisioningMode(function (result) { if (result) { amtMeiTmpState.ProvisioningMode = result.mode; } });
        amtMei.getProvisioningState(function (result) { if (result) { amtMeiTmpState.ProvisioningState = result.state; } }); // 0: "Not Activated (Pre)", 1: "Not Activated (In)", 2: "Activated"
        amtMei.getEHBCState(function (result) { if ((result != null) && (result.EHBC == true)) { amtMeiTmpState.Flags += 1; } });
        amtMei.getControlMode(function (result) { if (result != null) { if (result.controlMode == 1) { amtMeiTmpState.Flags += 2; } if (result.controlMode == 2) { amtMeiTmpState.Flags += 4; } } }); // Flag 2 = CCM, 4 = ACM
        //amtMei.getMACAddresses(function (result) { if (result) { amtMeiTmpState.mac = result; } });
        if ((flags & 8) != 0) {
            amtMei.getLanInterfaceSettings(0, function (result) {
                if (result) {
                    amtMeiTmpState.net0 = result;
                    var fqdn = null, interfaces = require('os').networkInterfaces(); // Look for the DNS suffix for the Intel AMT Ethernet interface
                    for (var i in interfaces) { for (var j in interfaces[i]) { if ((interfaces[i][j].mac == amtMeiTmpState.net0.mac) && (interfaces[i][j].fqdn != null) && (interfaces[i][j].fqdn != '')) { amtMeiTmpState.OsDnsSuffix = interfaces[i][j].fqdn; } } }
                }
            });
            amtMei.getLanInterfaceSettings(1, function (result) { if (result) { amtMeiTmpState.net1 = result; } });
        }
        amtMei.getUuid(function (result) { if ((result != null) && (result.uuid != null)) { amtMeiTmpState.UUID = result.uuid; } });
        if ((flags & 2) != 0) { amtMei.getLocalSystemAccount(function (x) { if ((x != null) && x.user && x.pass) { amtMeiTmpState.OsAdmin = { user: x.user, pass: x.pass }; } }); }
        amtMei.getDnsSuffix(function (result) { if (result != null) { amtMeiTmpState.DnsSuffix = result; } if ((flags & 4) == 0) { if (func != null) { func(amtMeiTmpState); } } });
        if ((flags & 4) != 0) {
            amtMei.getHashHandles(function (handles) {
                if ((handles != null) && (handles.length > 0)) { amtMeiTmpState.Hashes = []; } else { func(amtMeiTmpState); }
                var exitOnCount = handles.length;
                for (var i = 0; i < handles.length; ++i) { this.getCertHashEntry(handles[i], function (hashresult) { amtMeiTmpState.Hashes.push(hashresult); if (--exitOnCount == 0) { if (func != null) { func(amtMeiTmpState); } } }); }
            });
        }
    } catch (e) { if (func != null) { func(null); } return; }
}


//
//  Startup
//

// Parse URL arguments
function parseUrlArguments(url) {
    var r = {}, x = url.split('?');
    if (x.length < 2) return r;
    x = x[1].split('&');
    for (var i in x) { var j = x[i].indexOf('='); if (j > 0) { r[x[i].substring(0, j).toLowerCase()] = x[i].substring(j + 1); } }
    return r;
}

// Remove a element from a array
function removeItemFromArray(array, element) {
    var index = array.indexOf(element);
    if (index !== -1) { array.splice(index, 1); }
}

// Run MeshCmd, but before we do, we need to see if what type of service we are going to be
var serviceName = null, serviceDisplayName = null, serviceDesc = null;
for (var i in process.argv) {
    if (process.argv[i].toLowerCase() == 'install') { process.argv[i] = '-install'; }
    if (process.argv[i].toLowerCase() == 'uninstall') { process.argv[i] = '-uninstall'; }
    if ((process.argv[i].toLowerCase() == 'microlms') || (process.argv[i].toLowerCase() == 'amtlms') || (process.argv[i].toLowerCase() == 'lms')) {
        serviceName = 'MicroLMS';
        serviceDisplayName = "MicroLMS Service for Intel(R) AMT";
        serviceDesc = "Intel AMT Micro Local Manageability Service (MicroLMS)";
    } else if ((process.argv[i].toLowerCase() == 'intellms')) {
        serviceName = 'LMS';
        serviceDisplayName = "Intel(R) Management and Security Application Local Management Service";
        serviceDesc = "Intel(R) Management and Security Application Local Management Service - Provides OS-related Intel(R) ME functionality.";
    } else if ((process.argv[i].toLowerCase() == 'meshcommander') || (process.argv[i].toLowerCase() == 'commander')) {
        serviceName = 'MeshCommander';
        serviceDisplayName = "MeshCommander, Intel AMT Management console";
        serviceDesc = "MeshCommander is a Intel AMT management console.";
    }
}

if (serviceName == null) {
    if (process.execPath.includes('MicroLMS')) { serviceName = 'MicroLMS'; }
    else if (process.execPath.includes('LMS')) { serviceName = 'LMS'; }
    else if (process.execPath.includes('MeshCommander')) { serviceName = 'MeshCommander'; }
    if (serviceName == null) { for (var i in process.argv) { if ((process.argv[i].toLowerCase() == '-install') || (process.argv[i].toLowerCase() == '-uninstall')) { console.log('In order to install/uninstall, a service type must be specified.'); process.exit(); } } }
    if (serviceName == null) { try { run(process.argv); } catch (e) { console.log("ERROR: " + e); } }
} else {
    var serviceHost = require('service-host');
    var meshcmdService = new serviceHost({ name: serviceName, displayName: serviceDisplayName, startType: 'AUTO_START', description: serviceDesc });

    // Called when the background service is started.
    meshcmdService.on('serviceStart', function onStart() {
        //process.coreDumpLocation = 'C:\\tmp\\meshcommander.dmp';
        //process.on('exit', function () { console.log('exit3'); _debugCrash(); });
        console.setDestination(console.Destinations.DISABLED); // Disable console.log().
        //console.setDestination(console.Destinations.LOGFILE);
        //attachDebuger({ webport: 0, wait: 1 }).then(console.log, console.log);

        if (process.execPath.includes('MicroLMS')) { run([process.execPath, 'microlms']); } // Start MicroLMS
        else if (process.execPath.includes('LMS')) { run([process.execPath, 'microlms']); } // Start MicroLMS
        else if (process.execPath.includes('MeshCommander')) { run([process.execPath, 'meshcommander']); } // Start MeshCommander
        else { console.log("Aborting Service Start, because unknown binary: " + process.execPath); process.exit(1); }
    });

    // Called when the background service is stopping
    meshcmdService.on('serviceStop', function onStop() { console.log("Stopping service"); process.exit(); }); // The console.log() is for debugging, will be ignored unless "console.setDestination()" is set.

    // Called when the executable is not running as a service, run normally.
    meshcmdService.on('normalStart', function onNormalStart() { try { run(process.argv); } catch (e) { console.log("ERROR: " + e); } });
    meshcmdService.run();
}
